# coding: utf-8

"""
    Torn API

      * The development of Torn's API v2 is still ongoing.  * If selections remain unaltered, they will default to the API v1 version.  * Unlike API v1, API v2 accepts both selections and IDs as path and query parameters.  * If any discrepancies or errors are found, please submit a [bug report](https://www.torn.com/forums.php#/p=forums&f=19&b=0&a=0) on the Torn Forums.  * In case you're using bots to check for changes on openapi.json file, make sure to specificy a custom user-agent header - CloudFlare sometimes prevents requests from default user-agents.

    The version of the OpenAPI document: 3.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.faction_attacks_response import FactionAttacksResponse

class TestFactionAttacksResponse(unittest.TestCase):
    """FactionAttacksResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> FactionAttacksResponse:
        """Test FactionAttacksResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `FactionAttacksResponse`
        """
        model = FactionAttacksResponse()
        if include_optional:
            return FactionAttacksResponse(
                attacks = [
                    openapi_client.models.attack.Attack(
                        id = 56, 
                        code = '', 
                        started = 56, 
                        ended = 56, 
                        attacker = openapi_client.models.attack_player.AttackPlayer(
                            id = 56, 
                            name = '', 
                            level = 56, 
                            faction = openapi_client.models.attack_player_faction.AttackPlayerFaction(
                                id = 56, 
                                name = '', ), ), 
                        defender = openapi_client.models.attack_player.AttackPlayer(
                            id = 56, 
                            name = '', 
                            level = 56, 
                            faction = openapi_client.models.attack_player_faction.AttackPlayerFaction(
                                id = 56, 
                                name = '', ), ), 
                        result = 'None', 
                        respect_gain = 1.337, 
                        respect_loss = 1.337, 
                        chain = 56, 
                        is_interrupted = True, 
                        is_stealthed = True, 
                        is_raid = True, 
                        is_ranked_war = True, 
                        finishing_hit_effects = [
                            openapi_client.models.attacking_finishing_hit_effects.AttackingFinishingHitEffects(
                                name = 'proficience', 
                                value = 56, )
                            ], 
                        modifiers = openapi_client.models.attack_modifiers.Attack_modifiers(
                            fair_fight = 1.337, 
                            war = 1.337, 
                            retaliation = 1.337, 
                            group = 1.337, 
                            overseas = 1.337, 
                            chain = 1.337, 
                            warlord = 1.337, ), )
                    ],
                metadata = openapi_client.models.request_metadata_with_links.RequestMetadataWithLinks(
                    links = openapi_client.models.request_links.RequestLinks(
                        next = '', 
                        prev = '', ), )
            )
        else:
            return FactionAttacksResponse(
                attacks = [
                    openapi_client.models.attack.Attack(
                        id = 56, 
                        code = '', 
                        started = 56, 
                        ended = 56, 
                        attacker = openapi_client.models.attack_player.AttackPlayer(
                            id = 56, 
                            name = '', 
                            level = 56, 
                            faction = openapi_client.models.attack_player_faction.AttackPlayerFaction(
                                id = 56, 
                                name = '', ), ), 
                        defender = openapi_client.models.attack_player.AttackPlayer(
                            id = 56, 
                            name = '', 
                            level = 56, 
                            faction = openapi_client.models.attack_player_faction.AttackPlayerFaction(
                                id = 56, 
                                name = '', ), ), 
                        result = 'None', 
                        respect_gain = 1.337, 
                        respect_loss = 1.337, 
                        chain = 56, 
                        is_interrupted = True, 
                        is_stealthed = True, 
                        is_raid = True, 
                        is_ranked_war = True, 
                        finishing_hit_effects = [
                            openapi_client.models.attacking_finishing_hit_effects.AttackingFinishingHitEffects(
                                name = 'proficience', 
                                value = 56, )
                            ], 
                        modifiers = openapi_client.models.attack_modifiers.Attack_modifiers(
                            fair_fight = 1.337, 
                            war = 1.337, 
                            retaliation = 1.337, 
                            group = 1.337, 
                            overseas = 1.337, 
                            chain = 1.337, 
                            warlord = 1.337, ), )
                    ],
                metadata = openapi_client.models.request_metadata_with_links.RequestMetadataWithLinks(
                    links = openapi_client.models.request_links.RequestLinks(
                        next = '', 
                        prev = '', ), ),
        )
        """

    def testFactionAttacksResponse(self):
        """Test FactionAttacksResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
