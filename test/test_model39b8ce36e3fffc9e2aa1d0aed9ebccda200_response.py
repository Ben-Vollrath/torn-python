# coding: utf-8

"""
    Torn API

      * The development of Torn's API v2 is still ongoing.  * If selections remain unaltered, they will default to the API v1 version.  * Unlike API v1, API v2 accepts both selections and IDs as path and query parameters.  * If any discrepancies or errors are found, please submit a [bug report](https://www.torn.com/forums.php#/p=forums&f=19&b=0&a=0) on the Torn Forums.  * In case you're using bots to check for changes on openapi.json file, make sure to specificy a custom user-agent header - CloudFlare sometimes prevents requests from default user-agents.

    The version of the OpenAPI document: 3.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.model39b8ce36e3fffc9e2aa1d0aed9ebccda200_response import Model39b8ce36e3fffc9e2aa1d0aed9ebccda200Response

class TestModel39b8ce36e3fffc9e2aa1d0aed9ebccda200Response(unittest.TestCase):
    """Model39b8ce36e3fffc9e2aa1d0aed9ebccda200Response unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> Model39b8ce36e3fffc9e2aa1d0aed9ebccda200Response:
        """Test Model39b8ce36e3fffc9e2aa1d0aed9ebccda200Response
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `Model39b8ce36e3fffc9e2aa1d0aed9ebccda200Response`
        """
        model = Model39b8ce36e3fffc9e2aa1d0aed9ebccda200Response()
        if include_optional:
            return Model39b8ce36e3fffc9e2aa1d0aed9ebccda200Response(
                races = [
                    openapi_client.models.race.Race(
                        id = 56, 
                        title = '', 
                        track_id = 56, 
                        creator_id = 56, 
                        status = 'open', 
                        laps = 56, 
                        participants = openapi_client.models.race_participants.Race_participants(
                            minimum = 56, 
                            maximum = 56, 
                            current = 56, ), 
                        schedule = openapi_client.models.race_schedule.Race_schedule(
                            join_from = 56, 
                            join_until = 56, 
                            start = 56, 
                            end = 56, ), 
                        requirements = openapi_client.models.race_requirements.Race_requirements(
                            car_class = 'A', 
                            driver_class = 'A', 
                            car_item_id = 56, 
                            requires_stock_car = True, 
                            requires_password = True, 
                            join_fee = 56, ), 
                        is_official = True, )
                    ],
                metadata = openapi_client.models.request_metadata_with_links.RequestMetadataWithLinks(
                    links = openapi_client.models.request_links.RequestLinks(
                        next = '', 
                        prev = '', ), ),
                records = [
                    openapi_client.models.race_record.RaceRecord(
                        driver_id = 56, 
                        driver_name = '', 
                        car_item_id = 56, 
                        lap_time = 1.337, 
                        car_item_name = '', )
                    ],
                race = None,
                cars = [
                    openapi_client.models.race_car.RaceCar(
                        car_item_id = 56, 
                        car_item_name = '', 
                        top_speed = 56, 
                        acceleration = 56, 
                        braking = 56, 
                        dirt = 56, 
                        handling = 56, 
                        safety = 56, 
                        tarmac = 56, 
                        class = 'A', )
                    ],
                tracks = [
                    openapi_client.models.race_track.RaceTrack(
                        id = 56, 
                        title = '', 
                        description = '', )
                    ],
                carupgrades = [
                    openapi_client.models.race_car_upgrade.RaceCarUpgrade(
                        id = 56, 
                        class_required = 'A', 
                        name = '', 
                        description = '', 
                        category = 'Aerodynamics', 
                        subcategory = 'Engine Cooling', 
                        effects = openapi_client.models.race_car_upgrade_effects.RaceCarUpgrade_effects(
                            top_speed = 56, 
                            acceleration = 56, 
                            braking = 56, 
                            handling = 56, 
                            safety = 56, 
                            dirt = 56, 
                            tarmac = 56, ), 
                        cost = openapi_client.models.race_car_upgrade_cost.RaceCarUpgrade_cost(
                            points = 56, 
                            cash = 56, ), )
                    ],
                selections = [
                    null
                    ],
                timestamp = 56
            )
        else:
            return Model39b8ce36e3fffc9e2aa1d0aed9ebccda200Response(
                races = [
                    openapi_client.models.race.Race(
                        id = 56, 
                        title = '', 
                        track_id = 56, 
                        creator_id = 56, 
                        status = 'open', 
                        laps = 56, 
                        participants = openapi_client.models.race_participants.Race_participants(
                            minimum = 56, 
                            maximum = 56, 
                            current = 56, ), 
                        schedule = openapi_client.models.race_schedule.Race_schedule(
                            join_from = 56, 
                            join_until = 56, 
                            start = 56, 
                            end = 56, ), 
                        requirements = openapi_client.models.race_requirements.Race_requirements(
                            car_class = 'A', 
                            driver_class = 'A', 
                            car_item_id = 56, 
                            requires_stock_car = True, 
                            requires_password = True, 
                            join_fee = 56, ), 
                        is_official = True, )
                    ],
                metadata = openapi_client.models.request_metadata_with_links.RequestMetadataWithLinks(
                    links = openapi_client.models.request_links.RequestLinks(
                        next = '', 
                        prev = '', ), ),
                records = [
                    openapi_client.models.race_record.RaceRecord(
                        driver_id = 56, 
                        driver_name = '', 
                        car_item_id = 56, 
                        lap_time = 1.337, 
                        car_item_name = '', )
                    ],
                race = None,
                cars = [
                    openapi_client.models.race_car.RaceCar(
                        car_item_id = 56, 
                        car_item_name = '', 
                        top_speed = 56, 
                        acceleration = 56, 
                        braking = 56, 
                        dirt = 56, 
                        handling = 56, 
                        safety = 56, 
                        tarmac = 56, 
                        class = 'A', )
                    ],
                tracks = [
                    openapi_client.models.race_track.RaceTrack(
                        id = 56, 
                        title = '', 
                        description = '', )
                    ],
                carupgrades = [
                    openapi_client.models.race_car_upgrade.RaceCarUpgrade(
                        id = 56, 
                        class_required = 'A', 
                        name = '', 
                        description = '', 
                        category = 'Aerodynamics', 
                        subcategory = 'Engine Cooling', 
                        effects = openapi_client.models.race_car_upgrade_effects.RaceCarUpgrade_effects(
                            top_speed = 56, 
                            acceleration = 56, 
                            braking = 56, 
                            handling = 56, 
                            safety = 56, 
                            dirt = 56, 
                            tarmac = 56, ), 
                        cost = openapi_client.models.race_car_upgrade_cost.RaceCarUpgrade_cost(
                            points = 56, 
                            cash = 56, ), )
                    ],
                selections = [
                    null
                    ],
                timestamp = 56,
        )
        """

    def testModel39b8ce36e3fffc9e2aa1d0aed9ebccda200Response(self):
        """Test Model39b8ce36e3fffc9e2aa1d0aed9ebccda200Response"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
