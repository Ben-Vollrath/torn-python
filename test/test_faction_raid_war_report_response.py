# coding: utf-8

"""
    Torn API

      * The development of Torn's API v2 is still ongoing.  * If selections remain unaltered, they will default to the API v1 version.  * Unlike API v1, API v2 accepts both selections and IDs as path and query parameters.  * If any discrepancies or errors are found, please submit a [bug report](https://www.torn.com/forums.php#/p=forums&f=19&b=0&a=0) on the Torn Forums.  * In case you're using bots to check for changes on openapi.json file, make sure to specificy a custom user-agent header - CloudFlare sometimes prevents requests from default user-agents.

    The version of the OpenAPI document: 3.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.faction_raid_war_report_response import FactionRaidWarReportResponse

class TestFactionRaidWarReportResponse(unittest.TestCase):
    """FactionRaidWarReportResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> FactionRaidWarReportResponse:
        """Test FactionRaidWarReportResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `FactionRaidWarReportResponse`
        """
        model = FactionRaidWarReportResponse()
        if include_optional:
            return FactionRaidWarReportResponse(
                raidreport = [
                    openapi_client.models.faction_raid_report.FactionRaidReport(
                        id = 56, 
                        start = 56, 
                        end = 56, 
                        aggressor = openapi_client.models.faction_raid_report_faction.FactionRaidReportFaction(
                            id = 56, 
                            name = '', 
                            score = 1.337, 
                            attackers = [
                                openapi_client.models.faction_raid_report_attacker.FactionRaidReportAttacker(
                                    user = openapi_client.models.report_friend_or_foe_user.ReportFriendOrFoeUser(
                                        id = 56, 
                                        name = '', ), 
                                    attacks = 56, 
                                    damage = 1.337, )
                                ], 
                            non_attackers = [
                                openapi_client.models.report_friend_or_foe_user.ReportFriendOrFoeUser(
                                    id = 56, 
                                    name = '', )
                                ], ), 
                        defender = openapi_client.models.faction_raid_report_faction.FactionRaidReportFaction(
                            id = 56, 
                            name = '', 
                            score = 1.337, 
                            attackers = [
                                openapi_client.models.faction_raid_report_attacker.FactionRaidReportAttacker(
                                    user = , 
                                    attacks = 56, 
                                    damage = 1.337, )
                                ], 
                            non_attackers = [
                                
                                ], ), )
                    ]
            )
        else:
            return FactionRaidWarReportResponse(
                raidreport = [
                    openapi_client.models.faction_raid_report.FactionRaidReport(
                        id = 56, 
                        start = 56, 
                        end = 56, 
                        aggressor = openapi_client.models.faction_raid_report_faction.FactionRaidReportFaction(
                            id = 56, 
                            name = '', 
                            score = 1.337, 
                            attackers = [
                                openapi_client.models.faction_raid_report_attacker.FactionRaidReportAttacker(
                                    user = openapi_client.models.report_friend_or_foe_user.ReportFriendOrFoeUser(
                                        id = 56, 
                                        name = '', ), 
                                    attacks = 56, 
                                    damage = 1.337, )
                                ], 
                            non_attackers = [
                                openapi_client.models.report_friend_or_foe_user.ReportFriendOrFoeUser(
                                    id = 56, 
                                    name = '', )
                                ], ), 
                        defender = openapi_client.models.faction_raid_report_faction.FactionRaidReportFaction(
                            id = 56, 
                            name = '', 
                            score = 1.337, 
                            attackers = [
                                openapi_client.models.faction_raid_report_attacker.FactionRaidReportAttacker(
                                    user = , 
                                    attacks = 56, 
                                    damage = 1.337, )
                                ], 
                            non_attackers = [
                                
                                ], ), )
                    ],
        )
        """

    def testFactionRaidWarReportResponse(self):
        """Test FactionRaidWarReportResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
