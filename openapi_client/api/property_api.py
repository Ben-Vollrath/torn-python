# coding: utf-8

"""
    Torn API

      * The development of Torn's API v2 is still ongoing.  * If selections remain unaltered, they will default to the API v1 version.  * Unlike API v1, API v2 accepts both selections and IDs as path and query parameters.  * If any discrepancies or errors are found, please submit a [bug report](https://www.torn.com/forums.php#/p=forums&f=19&b=0&a=0) on the Torn Forums.  * In case you're using bots to check for changes on openapi.json file, make sure to specificy a custom user-agent header - CloudFlare sometimes prevents requests from default user-agents.

    The version of the OpenAPI document: 3.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictInt, StrictStr
from typing import List, Optional
from typing_extensions import Annotated
from openapi_client.models.model2a45b6d9d77224d9a1e13d0b698f6c4b200_response import Model2a45b6d9d77224d9a1e13d0b698f6c4b200Response
from openapi_client.models.property_lookup_response import PropertyLookupResponse
from openapi_client.models.property_selection_name import PropertySelectionName
from openapi_client.models.timestamp_response import TimestampResponse
from openapi_client.models.user_property_response import UserPropertyResponse

from openapi_client.api_client import ApiClient, RequestSerialized
from openapi_client.api_response import ApiResponse
from openapi_client.rest import RESTResponseType


class PropertyApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def call_2a45b6d9d77224d9a1e13d0b698f6c4b(
        self,
        id: Annotated[StrictInt, Field(description="Property id")],
        selections: Annotated[Optional[List[PropertySelectionName]], Field(description="Selection names")] = None,
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> Model2a45b6d9d77224d9a1e13d0b698f6c4b200Response:
        """Get any property selection

        Requires public access key. <br>Choose one or more selections (comma separated).

        :param id: Property id (required)
        :type id: int
        :param selections: Selection names
        :type selections: List[PropertySelectionName]
        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._call_2a45b6d9d77224d9a1e13d0b698f6c4b_serialize(
            id=id,
            selections=selections,
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Model2a45b6d9d77224d9a1e13d0b698f6c4b200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def call_2a45b6d9d77224d9a1e13d0b698f6c4b_with_http_info(
        self,
        id: Annotated[StrictInt, Field(description="Property id")],
        selections: Annotated[Optional[List[PropertySelectionName]], Field(description="Selection names")] = None,
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[Model2a45b6d9d77224d9a1e13d0b698f6c4b200Response]:
        """Get any property selection

        Requires public access key. <br>Choose one or more selections (comma separated).

        :param id: Property id (required)
        :type id: int
        :param selections: Selection names
        :type selections: List[PropertySelectionName]
        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._call_2a45b6d9d77224d9a1e13d0b698f6c4b_serialize(
            id=id,
            selections=selections,
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Model2a45b6d9d77224d9a1e13d0b698f6c4b200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def call_2a45b6d9d77224d9a1e13d0b698f6c4b_without_preload_content(
        self,
        id: Annotated[StrictInt, Field(description="Property id")],
        selections: Annotated[Optional[List[PropertySelectionName]], Field(description="Selection names")] = None,
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get any property selection

        Requires public access key. <br>Choose one or more selections (comma separated).

        :param id: Property id (required)
        :type id: int
        :param selections: Selection names
        :type selections: List[PropertySelectionName]
        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._call_2a45b6d9d77224d9a1e13d0b698f6c4b_serialize(
            id=id,
            selections=selections,
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Model2a45b6d9d77224d9a1e13d0b698f6c4b200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _call_2a45b6d9d77224d9a1e13d0b698f6c4b_serialize(
        self,
        id,
        selections,
        timestamp,
        comment,
        key,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'selections': 'csv',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if selections is not None:
            
            _query_params.append(('selections', selections))
            
        if id is not None:
            
            _query_params.append(('id', id))
            
        if timestamp is not None:
            
            _query_params.append(('timestamp', timestamp))
            
        if comment is not None:
            
            _query_params.append(('comment', comment))
            
        if key is not None:
            
            _query_params.append(('key', key))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'api_key'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/property',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def call_423c130a5cdf6bc801c42537c07fddec(
        self,
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> TimestampResponse:
        """Get current server time

        Requires public access key. <br>

        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._call_423c130a5cdf6bc801c42537c07fddec_serialize(
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TimestampResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def call_423c130a5cdf6bc801c42537c07fddec_with_http_info(
        self,
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[TimestampResponse]:
        """Get current server time

        Requires public access key. <br>

        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._call_423c130a5cdf6bc801c42537c07fddec_serialize(
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TimestampResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def call_423c130a5cdf6bc801c42537c07fddec_without_preload_content(
        self,
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get current server time

        Requires public access key. <br>

        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._call_423c130a5cdf6bc801c42537c07fddec_serialize(
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TimestampResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _call_423c130a5cdf6bc801c42537c07fddec_serialize(
        self,
        timestamp,
        comment,
        key,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if timestamp is not None:
            
            _query_params.append(('timestamp', timestamp))
            
        if comment is not None:
            
            _query_params.append(('comment', comment))
            
        if key is not None:
            
            _query_params.append(('key', key))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'api_key'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/property/timestamp',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def call_87bd73ddaf3749bce7cbf5aa28e921e2(
        self,
        id: Annotated[StrictInt, Field(description="Property id")],
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> UserPropertyResponse:
        """Get a specific property

        Requires public access key. <br>

        :param id: Property id (required)
        :type id: int
        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._call_87bd73ddaf3749bce7cbf5aa28e921e2_serialize(
            id=id,
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "UserPropertyResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def call_87bd73ddaf3749bce7cbf5aa28e921e2_with_http_info(
        self,
        id: Annotated[StrictInt, Field(description="Property id")],
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[UserPropertyResponse]:
        """Get a specific property

        Requires public access key. <br>

        :param id: Property id (required)
        :type id: int
        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._call_87bd73ddaf3749bce7cbf5aa28e921e2_serialize(
            id=id,
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "UserPropertyResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def call_87bd73ddaf3749bce7cbf5aa28e921e2_without_preload_content(
        self,
        id: Annotated[StrictInt, Field(description="Property id")],
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get a specific property

        Requires public access key. <br>

        :param id: Property id (required)
        :type id: int
        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._call_87bd73ddaf3749bce7cbf5aa28e921e2_serialize(
            id=id,
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "UserPropertyResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _call_87bd73ddaf3749bce7cbf5aa28e921e2_serialize(
        self,
        id,
        timestamp,
        comment,
        key,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        if timestamp is not None:
            
            _query_params.append(('timestamp', timestamp))
            
        if comment is not None:
            
            _query_params.append(('comment', comment))
            
        if key is not None:
            
            _query_params.append(('key', key))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'api_key'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/property/{id}/property',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def call_87fe6e3a7ec186e108922fed781c8d6d(
        self,
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> PropertyLookupResponse:
        """Get all available property selections

        Requires public access key. <br>

        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._call_87fe6e3a7ec186e108922fed781c8d6d_serialize(
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PropertyLookupResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def call_87fe6e3a7ec186e108922fed781c8d6d_with_http_info(
        self,
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[PropertyLookupResponse]:
        """Get all available property selections

        Requires public access key. <br>

        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._call_87fe6e3a7ec186e108922fed781c8d6d_serialize(
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PropertyLookupResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def call_87fe6e3a7ec186e108922fed781c8d6d_without_preload_content(
        self,
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get all available property selections

        Requires public access key. <br>

        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._call_87fe6e3a7ec186e108922fed781c8d6d_serialize(
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PropertyLookupResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _call_87fe6e3a7ec186e108922fed781c8d6d_serialize(
        self,
        timestamp,
        comment,
        key,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if timestamp is not None:
            
            _query_params.append(('timestamp', timestamp))
            
        if comment is not None:
            
            _query_params.append(('comment', comment))
            
        if key is not None:
            
            _query_params.append(('key', key))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'api_key'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/property/lookup',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


