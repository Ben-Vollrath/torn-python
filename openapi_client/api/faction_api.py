# coding: utf-8

"""
    Torn API

      * The development of Torn's API v2 is still ongoing.  * If selections remain unaltered, they will default to the API v1 version.  * Unlike API v1, API v2 accepts both selections and IDs as path and query parameters.  * If any discrepancies or errors are found, please submit a [bug report](https://www.torn.com/forums.php#/p=forums&f=19&b=0&a=0) on the Torn Forums.  * In case you're using bots to check for changes on openapi.json file, make sure to specificy a custom user-agent header - CloudFlare sometimes prevents requests from default user-agents.

    The version of the OpenAPI document: 3.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictInt, StrictStr, field_validator
from typing import Any, List, Optional
from typing_extensions import Annotated
from openapi_client.models.dd89e28b1f1ed88853b09ecc982e4e66200_response import Dd89e28b1f1ed88853b09ecc982e4e66200Response
from openapi_client.models.faction_applications_response import FactionApplicationsResponse
from openapi_client.models.faction_attacks_full_response import FactionAttacksFullResponse
from openapi_client.models.faction_attacks_response import FactionAttacksResponse
from openapi_client.models.faction_balance_response import FactionBalanceResponse
from openapi_client.models.faction_basic_response import FactionBasicResponse
from openapi_client.models.faction_chain_report_response import FactionChainReportResponse
from openapi_client.models.faction_chains_response import FactionChainsResponse
from openapi_client.models.faction_contributors_response import FactionContributorsResponse
from openapi_client.models.faction_crime_response import FactionCrimeResponse
from openapi_client.models.faction_crimes_response import FactionCrimesResponse
from openapi_client.models.faction_hof_response import FactionHofResponse
from openapi_client.models.faction_lookup_response import FactionLookupResponse
from openapi_client.models.faction_members_response import FactionMembersResponse
from openapi_client.models.faction_news_category import FactionNewsCategory
from openapi_client.models.faction_news_response import FactionNewsResponse
from openapi_client.models.faction_ongoing_chain_response import FactionOngoingChainResponse
from openapi_client.models.faction_positions_response import FactionPositionsResponse
from openapi_client.models.faction_rackets_response import FactionRacketsResponse
from openapi_client.models.faction_raid_war_report_response import FactionRaidWarReportResponse
from openapi_client.models.faction_raids_response import FactionRaidsResponse
from openapi_client.models.faction_ranked_war_report_response import FactionRankedWarReportResponse
from openapi_client.models.faction_ranked_war_response import FactionRankedWarResponse
from openapi_client.models.faction_ranked_wars_category_enum import FactionRankedWarsCategoryEnum
from openapi_client.models.faction_search_response import FactionSearchResponse
from openapi_client.models.faction_selection_name import FactionSelectionName
from openapi_client.models.faction_stat_enum import FactionStatEnum
from openapi_client.models.faction_stats_response import FactionStatsResponse
from openapi_client.models.faction_territories_ownership_response import FactionTerritoriesOwnershipResponse
from openapi_client.models.faction_territories_response import FactionTerritoriesResponse
from openapi_client.models.faction_territory_war_report_response import FactionTerritoryWarReportResponse
from openapi_client.models.faction_territory_wars_category_enum import FactionTerritoryWarsCategoryEnum
from openapi_client.models.faction_territory_wars_history_response import FactionTerritoryWarsHistoryResponse
from openapi_client.models.faction_territory_wars_response import FactionTerritoryWarsResponse
from openapi_client.models.faction_upgrades_response import FactionUpgradesResponse
from openapi_client.models.faction_warfare_response import FactionWarfareResponse
from openapi_client.models.faction_warfare_type_enum import FactionWarfareTypeEnum
from openapi_client.models.faction_wars_response import FactionWarsResponse
from openapi_client.models.model01c192f9b41ce29372df54667bea2b43_filters_parameter_inner import Model01c192f9b41ce29372df54667bea2b43FiltersParameterInner
from openapi_client.models.report_type_enum import ReportTypeEnum
from openapi_client.models.reports_response import ReportsResponse
from openapi_client.models.revives_full_response import RevivesFullResponse
from openapi_client.models.revives_response import RevivesResponse
from openapi_client.models.timestamp_response import TimestampResponse

from openapi_client.api_client import ApiClient, RequestSerialized
from openapi_client.api_response import ApiResponse
from openapi_client.rest import RESTResponseType


class FactionApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def a09da2d5f951a49d974dbec3149b3a24(
        self,
        id: Annotated[StrictInt, Field(description="Faction id")],
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> FactionBasicResponse:
        """Get a faction's basic details

        Requires public access key. <br> The 'is_enlisted' value will be populated if you're requesting data for your faction and have faction permissions (with custom, limited or full access keys), otherwise it will be set as null.

        :param id: Faction id (required)
        :type id: int
        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._a09da2d5f951a49d974dbec3149b3a24_serialize(
            id=id,
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FactionBasicResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def a09da2d5f951a49d974dbec3149b3a24_with_http_info(
        self,
        id: Annotated[StrictInt, Field(description="Faction id")],
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[FactionBasicResponse]:
        """Get a faction's basic details

        Requires public access key. <br> The 'is_enlisted' value will be populated if you're requesting data for your faction and have faction permissions (with custom, limited or full access keys), otherwise it will be set as null.

        :param id: Faction id (required)
        :type id: int
        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._a09da2d5f951a49d974dbec3149b3a24_serialize(
            id=id,
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FactionBasicResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def a09da2d5f951a49d974dbec3149b3a24_without_preload_content(
        self,
        id: Annotated[StrictInt, Field(description="Faction id")],
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get a faction's basic details

        Requires public access key. <br> The 'is_enlisted' value will be populated if you're requesting data for your faction and have faction permissions (with custom, limited or full access keys), otherwise it will be set as null.

        :param id: Faction id (required)
        :type id: int
        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._a09da2d5f951a49d974dbec3149b3a24_serialize(
            id=id,
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FactionBasicResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _a09da2d5f951a49d974dbec3149b3a24_serialize(
        self,
        id,
        timestamp,
        comment,
        key,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        if timestamp is not None:
            
            _query_params.append(('timestamp', timestamp))
            
        if comment is not None:
            
            _query_params.append(('comment', comment))
            
        if key is not None:
            
            _query_params.append(('key', key))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'api_key'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/faction/{id}/basic',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def a775ca7831f4cad88c308be28f50e597(
        self,
        id: Annotated[StrictInt, Field(description="Faction id")],
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> FactionHofResponse:
        """Get a faction's hall of fame rankings.

        Requires public access key. <br> 

        :param id: Faction id (required)
        :type id: int
        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._a775ca7831f4cad88c308be28f50e597_serialize(
            id=id,
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FactionHofResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def a775ca7831f4cad88c308be28f50e597_with_http_info(
        self,
        id: Annotated[StrictInt, Field(description="Faction id")],
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[FactionHofResponse]:
        """Get a faction's hall of fame rankings.

        Requires public access key. <br> 

        :param id: Faction id (required)
        :type id: int
        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._a775ca7831f4cad88c308be28f50e597_serialize(
            id=id,
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FactionHofResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def a775ca7831f4cad88c308be28f50e597_without_preload_content(
        self,
        id: Annotated[StrictInt, Field(description="Faction id")],
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get a faction's hall of fame rankings.

        Requires public access key. <br> 

        :param id: Faction id (required)
        :type id: int
        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._a775ca7831f4cad88c308be28f50e597_serialize(
            id=id,
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FactionHofResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _a775ca7831f4cad88c308be28f50e597_serialize(
        self,
        id,
        timestamp,
        comment,
        key,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        if timestamp is not None:
            
            _query_params.append(('timestamp', timestamp))
            
        if comment is not None:
            
            _query_params.append(('comment', comment))
            
        if key is not None:
            
            _query_params.append(('key', key))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'api_key'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/faction/{id}/hof',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def ae7f06db4618d3e7927fd700cfa58f16(
        self,
        cat: FactionWarfareTypeEnum,
        limit: Optional[Annotated[int, Field(le=100, strict=True, ge=1)]] = None,
        sort: Annotated[Optional[StrictStr], Field(description="Sorted by the greatest timestamps")] = None,
        var_from: Annotated[Optional[StrictInt], Field(description="Timestamp that sets the lower limit for the data returned. Data returned will be after this time")] = None,
        to: Annotated[Optional[StrictInt], Field(description="Timestamp that sets the upper limit for the data returned. Data returned will be up to and including this time")] = None,
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> FactionWarfareResponse:
        """Get faction warfare

        Requires public access key. <br>The response depends on the selected category.

        :param cat: (required)
        :type cat: FactionWarfareTypeEnum
        :param limit:
        :type limit: int
        :param sort: Sorted by the greatest timestamps
        :type sort: str
        :param var_from: Timestamp that sets the lower limit for the data returned. Data returned will be after this time
        :type var_from: int
        :param to: Timestamp that sets the upper limit for the data returned. Data returned will be up to and including this time
        :type to: int
        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._ae7f06db4618d3e7927fd700cfa58f16_serialize(
            cat=cat,
            limit=limit,
            sort=sort,
            var_from=var_from,
            to=to,
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FactionWarfareResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def ae7f06db4618d3e7927fd700cfa58f16_with_http_info(
        self,
        cat: FactionWarfareTypeEnum,
        limit: Optional[Annotated[int, Field(le=100, strict=True, ge=1)]] = None,
        sort: Annotated[Optional[StrictStr], Field(description="Sorted by the greatest timestamps")] = None,
        var_from: Annotated[Optional[StrictInt], Field(description="Timestamp that sets the lower limit for the data returned. Data returned will be after this time")] = None,
        to: Annotated[Optional[StrictInt], Field(description="Timestamp that sets the upper limit for the data returned. Data returned will be up to and including this time")] = None,
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[FactionWarfareResponse]:
        """Get faction warfare

        Requires public access key. <br>The response depends on the selected category.

        :param cat: (required)
        :type cat: FactionWarfareTypeEnum
        :param limit:
        :type limit: int
        :param sort: Sorted by the greatest timestamps
        :type sort: str
        :param var_from: Timestamp that sets the lower limit for the data returned. Data returned will be after this time
        :type var_from: int
        :param to: Timestamp that sets the upper limit for the data returned. Data returned will be up to and including this time
        :type to: int
        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._ae7f06db4618d3e7927fd700cfa58f16_serialize(
            cat=cat,
            limit=limit,
            sort=sort,
            var_from=var_from,
            to=to,
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FactionWarfareResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def ae7f06db4618d3e7927fd700cfa58f16_without_preload_content(
        self,
        cat: FactionWarfareTypeEnum,
        limit: Optional[Annotated[int, Field(le=100, strict=True, ge=1)]] = None,
        sort: Annotated[Optional[StrictStr], Field(description="Sorted by the greatest timestamps")] = None,
        var_from: Annotated[Optional[StrictInt], Field(description="Timestamp that sets the lower limit for the data returned. Data returned will be after this time")] = None,
        to: Annotated[Optional[StrictInt], Field(description="Timestamp that sets the upper limit for the data returned. Data returned will be up to and including this time")] = None,
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get faction warfare

        Requires public access key. <br>The response depends on the selected category.

        :param cat: (required)
        :type cat: FactionWarfareTypeEnum
        :param limit:
        :type limit: int
        :param sort: Sorted by the greatest timestamps
        :type sort: str
        :param var_from: Timestamp that sets the lower limit for the data returned. Data returned will be after this time
        :type var_from: int
        :param to: Timestamp that sets the upper limit for the data returned. Data returned will be up to and including this time
        :type to: int
        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._ae7f06db4618d3e7927fd700cfa58f16_serialize(
            cat=cat,
            limit=limit,
            sort=sort,
            var_from=var_from,
            to=to,
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FactionWarfareResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _ae7f06db4618d3e7927fd700cfa58f16_serialize(
        self,
        cat,
        limit,
        sort,
        var_from,
        to,
        timestamp,
        comment,
        key,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if cat is not None:
            
            _query_params.append(('cat', cat.value))
            
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if sort is not None:
            
            _query_params.append(('sort', sort))
            
        if var_from is not None:
            
            _query_params.append(('from', var_from))
            
        if to is not None:
            
            _query_params.append(('to', to))
            
        if timestamp is not None:
            
            _query_params.append(('timestamp', timestamp))
            
        if comment is not None:
            
            _query_params.append(('comment', comment))
            
        if key is not None:
            
            _query_params.append(('key', key))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'api_key'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/faction/warfare',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def aee5679a81c6a7bcd3862c0aafd6b558(
        self,
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> FactionOngoingChainResponse:
        """Get your faction's current chain

        Requires public access key. <br>

        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._aee5679a81c6a7bcd3862c0aafd6b558_serialize(
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FactionOngoingChainResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def aee5679a81c6a7bcd3862c0aafd6b558_with_http_info(
        self,
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[FactionOngoingChainResponse]:
        """Get your faction's current chain

        Requires public access key. <br>

        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._aee5679a81c6a7bcd3862c0aafd6b558_serialize(
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FactionOngoingChainResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def aee5679a81c6a7bcd3862c0aafd6b558_without_preload_content(
        self,
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get your faction's current chain

        Requires public access key. <br>

        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._aee5679a81c6a7bcd3862c0aafd6b558_serialize(
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FactionOngoingChainResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _aee5679a81c6a7bcd3862c0aafd6b558_serialize(
        self,
        timestamp,
        comment,
        key,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if timestamp is not None:
            
            _query_params.append(('timestamp', timestamp))
            
        if comment is not None:
            
            _query_params.append(('comment', comment))
            
        if key is not None:
            
            _query_params.append(('key', key))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'api_key'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/faction/chain',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def b31cce9916e77431c08822844a0dbf2b(
        self,
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> FactionWarsResponse:
        """Get your faction's wars & pacts details

        Requires public access key. <br> 

        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._b31cce9916e77431c08822844a0dbf2b_serialize(
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FactionWarsResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def b31cce9916e77431c08822844a0dbf2b_with_http_info(
        self,
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[FactionWarsResponse]:
        """Get your faction's wars & pacts details

        Requires public access key. <br> 

        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._b31cce9916e77431c08822844a0dbf2b_serialize(
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FactionWarsResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def b31cce9916e77431c08822844a0dbf2b_without_preload_content(
        self,
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get your faction's wars & pacts details

        Requires public access key. <br> 

        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._b31cce9916e77431c08822844a0dbf2b_serialize(
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FactionWarsResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _b31cce9916e77431c08822844a0dbf2b_serialize(
        self,
        timestamp,
        comment,
        key,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if timestamp is not None:
            
            _query_params.append(('timestamp', timestamp))
            
        if comment is not None:
            
            _query_params.append(('comment', comment))
            
        if key is not None:
            
            _query_params.append(('key', key))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'api_key'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/faction/wars',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def b4867db9b02fa7dcd31b2073f2a936ce(
        self,
        crime_id: Annotated[StrictInt, Field(description="Crime id")],
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Minimal).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> FactionCrimeResponse:
        """Get a specific organized crime

        Requires minimal access key with faction API access permissions. <br>

        :param crime_id: Crime id (required)
        :type crime_id: int
        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Minimal).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._b4867db9b02fa7dcd31b2073f2a936ce_serialize(
            crime_id=crime_id,
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FactionCrimeResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def b4867db9b02fa7dcd31b2073f2a936ce_with_http_info(
        self,
        crime_id: Annotated[StrictInt, Field(description="Crime id")],
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Minimal).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[FactionCrimeResponse]:
        """Get a specific organized crime

        Requires minimal access key with faction API access permissions. <br>

        :param crime_id: Crime id (required)
        :type crime_id: int
        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Minimal).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._b4867db9b02fa7dcd31b2073f2a936ce_serialize(
            crime_id=crime_id,
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FactionCrimeResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def b4867db9b02fa7dcd31b2073f2a936ce_without_preload_content(
        self,
        crime_id: Annotated[StrictInt, Field(description="Crime id")],
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Minimal).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get a specific organized crime

        Requires minimal access key with faction API access permissions. <br>

        :param crime_id: Crime id (required)
        :type crime_id: int
        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Minimal).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._b4867db9b02fa7dcd31b2073f2a936ce_serialize(
            crime_id=crime_id,
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FactionCrimeResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _b4867db9b02fa7dcd31b2073f2a936ce_serialize(
        self,
        crime_id,
        timestamp,
        comment,
        key,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if crime_id is not None:
            _path_params['crimeId'] = crime_id
        # process the query parameters
        if timestamp is not None:
            
            _query_params.append(('timestamp', timestamp))
            
        if comment is not None:
            
            _query_params.append(('comment', comment))
            
        if key is not None:
            
            _query_params.append(('key', key))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'api_key'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/faction/{crimeId}/crime',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def bf56fb8aba4d6810e9b96402e25b931d(
        self,
        offset: Optional[Annotated[int, Field(strict=True, ge=0)]] = None,
        limit: Optional[Annotated[int, Field(le=500, strict=True, ge=1)]] = None,
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> FactionTerritoriesOwnershipResponse:
        """Get a list of your faction's territories

        Requires public access key. <br>

        :param offset:
        :type offset: int
        :param limit:
        :type limit: int
        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._bf56fb8aba4d6810e9b96402e25b931d_serialize(
            offset=offset,
            limit=limit,
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FactionTerritoriesOwnershipResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def bf56fb8aba4d6810e9b96402e25b931d_with_http_info(
        self,
        offset: Optional[Annotated[int, Field(strict=True, ge=0)]] = None,
        limit: Optional[Annotated[int, Field(le=500, strict=True, ge=1)]] = None,
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[FactionTerritoriesOwnershipResponse]:
        """Get a list of your faction's territories

        Requires public access key. <br>

        :param offset:
        :type offset: int
        :param limit:
        :type limit: int
        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._bf56fb8aba4d6810e9b96402e25b931d_serialize(
            offset=offset,
            limit=limit,
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FactionTerritoriesOwnershipResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def bf56fb8aba4d6810e9b96402e25b931d_without_preload_content(
        self,
        offset: Optional[Annotated[int, Field(strict=True, ge=0)]] = None,
        limit: Optional[Annotated[int, Field(le=500, strict=True, ge=1)]] = None,
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get a list of your faction's territories

        Requires public access key. <br>

        :param offset:
        :type offset: int
        :param limit:
        :type limit: int
        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._bf56fb8aba4d6810e9b96402e25b931d_serialize(
            offset=offset,
            limit=limit,
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FactionTerritoriesOwnershipResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _bf56fb8aba4d6810e9b96402e25b931d_serialize(
        self,
        offset,
        limit,
        timestamp,
        comment,
        key,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if offset is not None:
            
            _query_params.append(('offset', offset))
            
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if timestamp is not None:
            
            _query_params.append(('timestamp', timestamp))
            
        if comment is not None:
            
            _query_params.append(('comment', comment))
            
        if key is not None:
            
            _query_params.append(('key', key))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'api_key'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/faction/territoryownership',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def c370823454d5ea28fc0df9a5b6a24c54(
        self,
        id: Annotated[StrictInt, Field(description="Faction id")],
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> FactionWarsResponse:
        """Get a faction's wars & pacts details

        Requires public access key. <br> 

        :param id: Faction id (required)
        :type id: int
        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._c370823454d5ea28fc0df9a5b6a24c54_serialize(
            id=id,
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FactionWarsResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def c370823454d5ea28fc0df9a5b6a24c54_with_http_info(
        self,
        id: Annotated[StrictInt, Field(description="Faction id")],
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[FactionWarsResponse]:
        """Get a faction's wars & pacts details

        Requires public access key. <br> 

        :param id: Faction id (required)
        :type id: int
        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._c370823454d5ea28fc0df9a5b6a24c54_serialize(
            id=id,
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FactionWarsResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def c370823454d5ea28fc0df9a5b6a24c54_without_preload_content(
        self,
        id: Annotated[StrictInt, Field(description="Faction id")],
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get a faction's wars & pacts details

        Requires public access key. <br> 

        :param id: Faction id (required)
        :type id: int
        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._c370823454d5ea28fc0df9a5b6a24c54_serialize(
            id=id,
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FactionWarsResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _c370823454d5ea28fc0df9a5b6a24c54_serialize(
        self,
        id,
        timestamp,
        comment,
        key,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        if timestamp is not None:
            
            _query_params.append(('timestamp', timestamp))
            
        if comment is not None:
            
            _query_params.append(('comment', comment))
            
        if key is not None:
            
            _query_params.append(('key', key))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'api_key'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/faction/{id}/wars',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def call_01c192f9b41ce29372df54667bea2b43(
        self,
        name: Annotated[Optional[StrictStr], Field(description="Name  to search for.")] = None,
        filters: Annotated[Optional[List[Model01c192f9b41ce29372df54667bea2b43FiltersParameterInner]], Field(description="A filtering query parameter allowing a comma-separated list of filters. <br>  * Each filter can be one of the following:  * Fixed options: 'destroyed', 'notDestroyed', 'recruiting', 'notRecruiting'  * Dynamic options: `fieldName`+`condition`+`number`, where:  * * `fieldName` is one of: `id`, `respect`, `members`  * * `condition` is one of: `Equal`, `NotEqual`, `Less`, `LessOrEqual`, `GreaterOrEqual`, `Greater`  * * `number`: any integer value  * Examples: `filters=destroyed`, `filters=notDestroyed,recruiting`, `filters=respectLessOrEqual20000,idGreater100,notRecruiting`")] = None,
        limit: Optional[Annotated[int, Field(le=50, strict=True, ge=1)]] = None,
        offset: Optional[Annotated[int, Field(strict=True, ge=0)]] = None,
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> FactionSearchResponse:
        """Search factions by name or other criteria

        Requires public access key. <br>This selection is standalone and cannot be used together with other selections.

        :param name: Name  to search for.
        :type name: str
        :param filters: A filtering query parameter allowing a comma-separated list of filters. <br>  * Each filter can be one of the following:  * Fixed options: 'destroyed', 'notDestroyed', 'recruiting', 'notRecruiting'  * Dynamic options: `fieldName`+`condition`+`number`, where:  * * `fieldName` is one of: `id`, `respect`, `members`  * * `condition` is one of: `Equal`, `NotEqual`, `Less`, `LessOrEqual`, `GreaterOrEqual`, `Greater`  * * `number`: any integer value  * Examples: `filters=destroyed`, `filters=notDestroyed,recruiting`, `filters=respectLessOrEqual20000,idGreater100,notRecruiting`
        :type filters: List[Model01c192f9b41ce29372df54667bea2b43FiltersParameterInner]
        :param limit:
        :type limit: int
        :param offset:
        :type offset: int
        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._call_01c192f9b41ce29372df54667bea2b43_serialize(
            name=name,
            filters=filters,
            limit=limit,
            offset=offset,
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FactionSearchResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def call_01c192f9b41ce29372df54667bea2b43_with_http_info(
        self,
        name: Annotated[Optional[StrictStr], Field(description="Name  to search for.")] = None,
        filters: Annotated[Optional[List[Model01c192f9b41ce29372df54667bea2b43FiltersParameterInner]], Field(description="A filtering query parameter allowing a comma-separated list of filters. <br>  * Each filter can be one of the following:  * Fixed options: 'destroyed', 'notDestroyed', 'recruiting', 'notRecruiting'  * Dynamic options: `fieldName`+`condition`+`number`, where:  * * `fieldName` is one of: `id`, `respect`, `members`  * * `condition` is one of: `Equal`, `NotEqual`, `Less`, `LessOrEqual`, `GreaterOrEqual`, `Greater`  * * `number`: any integer value  * Examples: `filters=destroyed`, `filters=notDestroyed,recruiting`, `filters=respectLessOrEqual20000,idGreater100,notRecruiting`")] = None,
        limit: Optional[Annotated[int, Field(le=50, strict=True, ge=1)]] = None,
        offset: Optional[Annotated[int, Field(strict=True, ge=0)]] = None,
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[FactionSearchResponse]:
        """Search factions by name or other criteria

        Requires public access key. <br>This selection is standalone and cannot be used together with other selections.

        :param name: Name  to search for.
        :type name: str
        :param filters: A filtering query parameter allowing a comma-separated list of filters. <br>  * Each filter can be one of the following:  * Fixed options: 'destroyed', 'notDestroyed', 'recruiting', 'notRecruiting'  * Dynamic options: `fieldName`+`condition`+`number`, where:  * * `fieldName` is one of: `id`, `respect`, `members`  * * `condition` is one of: `Equal`, `NotEqual`, `Less`, `LessOrEqual`, `GreaterOrEqual`, `Greater`  * * `number`: any integer value  * Examples: `filters=destroyed`, `filters=notDestroyed,recruiting`, `filters=respectLessOrEqual20000,idGreater100,notRecruiting`
        :type filters: List[Model01c192f9b41ce29372df54667bea2b43FiltersParameterInner]
        :param limit:
        :type limit: int
        :param offset:
        :type offset: int
        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._call_01c192f9b41ce29372df54667bea2b43_serialize(
            name=name,
            filters=filters,
            limit=limit,
            offset=offset,
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FactionSearchResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def call_01c192f9b41ce29372df54667bea2b43_without_preload_content(
        self,
        name: Annotated[Optional[StrictStr], Field(description="Name  to search for.")] = None,
        filters: Annotated[Optional[List[Model01c192f9b41ce29372df54667bea2b43FiltersParameterInner]], Field(description="A filtering query parameter allowing a comma-separated list of filters. <br>  * Each filter can be one of the following:  * Fixed options: 'destroyed', 'notDestroyed', 'recruiting', 'notRecruiting'  * Dynamic options: `fieldName`+`condition`+`number`, where:  * * `fieldName` is one of: `id`, `respect`, `members`  * * `condition` is one of: `Equal`, `NotEqual`, `Less`, `LessOrEqual`, `GreaterOrEqual`, `Greater`  * * `number`: any integer value  * Examples: `filters=destroyed`, `filters=notDestroyed,recruiting`, `filters=respectLessOrEqual20000,idGreater100,notRecruiting`")] = None,
        limit: Optional[Annotated[int, Field(le=50, strict=True, ge=1)]] = None,
        offset: Optional[Annotated[int, Field(strict=True, ge=0)]] = None,
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Search factions by name or other criteria

        Requires public access key. <br>This selection is standalone and cannot be used together with other selections.

        :param name: Name  to search for.
        :type name: str
        :param filters: A filtering query parameter allowing a comma-separated list of filters. <br>  * Each filter can be one of the following:  * Fixed options: 'destroyed', 'notDestroyed', 'recruiting', 'notRecruiting'  * Dynamic options: `fieldName`+`condition`+`number`, where:  * * `fieldName` is one of: `id`, `respect`, `members`  * * `condition` is one of: `Equal`, `NotEqual`, `Less`, `LessOrEqual`, `GreaterOrEqual`, `Greater`  * * `number`: any integer value  * Examples: `filters=destroyed`, `filters=notDestroyed,recruiting`, `filters=respectLessOrEqual20000,idGreater100,notRecruiting`
        :type filters: List[Model01c192f9b41ce29372df54667bea2b43FiltersParameterInner]
        :param limit:
        :type limit: int
        :param offset:
        :type offset: int
        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._call_01c192f9b41ce29372df54667bea2b43_serialize(
            name=name,
            filters=filters,
            limit=limit,
            offset=offset,
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FactionSearchResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _call_01c192f9b41ce29372df54667bea2b43_serialize(
        self,
        name,
        filters,
        limit,
        offset,
        timestamp,
        comment,
        key,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'filters': 'csv',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if name is not None:
            
            _query_params.append(('name', name))
            
        if filters is not None:
            
            _query_params.append(('filters', filters))
            
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if offset is not None:
            
            _query_params.append(('offset', offset))
            
        if timestamp is not None:
            
            _query_params.append(('timestamp', timestamp))
            
        if comment is not None:
            
            _query_params.append(('comment', comment))
            
        if key is not None:
            
            _query_params.append(('key', key))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'api_key'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/faction/search',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def call_0258963246159d1e3e54547c32aac7c8(
        self,
        cat: Annotated[Optional[FactionTerritoryWarsCategoryEnum], Field(description="This parameter is deprecated. The territory wars list can now instead be fetched via 'faction' -> 'warfare' endpoint. This functionality will be removed on 1st of September 2025.")] = None,
        var_from: Annotated[Optional[StrictInt], Field(description="Timestamp that sets the lower limit for the data returned. Data returned will be after this time")] = None,
        to: Annotated[Optional[StrictInt], Field(description="Timestamp that sets the upper limit for the data returned. Data returned will be up to and including this time")] = None,
        sort: Annotated[Optional[StrictStr], Field(description="Sorted by the greatest timestamps")] = None,
        limit: Optional[Annotated[int, Field(le=100, strict=True, ge=1)]] = None,
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> FactionTerritoryWarsResponse:
        """Get territory wars history for your faction

        Requires public access key. <br>

        :param cat: This parameter is deprecated. The territory wars list can now instead be fetched via 'faction' -> 'warfare' endpoint. This functionality will be removed on 1st of September 2025.
        :type cat: FactionTerritoryWarsCategoryEnum
        :param var_from: Timestamp that sets the lower limit for the data returned. Data returned will be after this time
        :type var_from: int
        :param to: Timestamp that sets the upper limit for the data returned. Data returned will be up to and including this time
        :type to: int
        :param sort: Sorted by the greatest timestamps
        :type sort: str
        :param limit:
        :type limit: int
        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._call_0258963246159d1e3e54547c32aac7c8_serialize(
            cat=cat,
            var_from=var_from,
            to=to,
            sort=sort,
            limit=limit,
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FactionTerritoryWarsResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def call_0258963246159d1e3e54547c32aac7c8_with_http_info(
        self,
        cat: Annotated[Optional[FactionTerritoryWarsCategoryEnum], Field(description="This parameter is deprecated. The territory wars list can now instead be fetched via 'faction' -> 'warfare' endpoint. This functionality will be removed on 1st of September 2025.")] = None,
        var_from: Annotated[Optional[StrictInt], Field(description="Timestamp that sets the lower limit for the data returned. Data returned will be after this time")] = None,
        to: Annotated[Optional[StrictInt], Field(description="Timestamp that sets the upper limit for the data returned. Data returned will be up to and including this time")] = None,
        sort: Annotated[Optional[StrictStr], Field(description="Sorted by the greatest timestamps")] = None,
        limit: Optional[Annotated[int, Field(le=100, strict=True, ge=1)]] = None,
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[FactionTerritoryWarsResponse]:
        """Get territory wars history for your faction

        Requires public access key. <br>

        :param cat: This parameter is deprecated. The territory wars list can now instead be fetched via 'faction' -> 'warfare' endpoint. This functionality will be removed on 1st of September 2025.
        :type cat: FactionTerritoryWarsCategoryEnum
        :param var_from: Timestamp that sets the lower limit for the data returned. Data returned will be after this time
        :type var_from: int
        :param to: Timestamp that sets the upper limit for the data returned. Data returned will be up to and including this time
        :type to: int
        :param sort: Sorted by the greatest timestamps
        :type sort: str
        :param limit:
        :type limit: int
        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._call_0258963246159d1e3e54547c32aac7c8_serialize(
            cat=cat,
            var_from=var_from,
            to=to,
            sort=sort,
            limit=limit,
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FactionTerritoryWarsResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def call_0258963246159d1e3e54547c32aac7c8_without_preload_content(
        self,
        cat: Annotated[Optional[FactionTerritoryWarsCategoryEnum], Field(description="This parameter is deprecated. The territory wars list can now instead be fetched via 'faction' -> 'warfare' endpoint. This functionality will be removed on 1st of September 2025.")] = None,
        var_from: Annotated[Optional[StrictInt], Field(description="Timestamp that sets the lower limit for the data returned. Data returned will be after this time")] = None,
        to: Annotated[Optional[StrictInt], Field(description="Timestamp that sets the upper limit for the data returned. Data returned will be up to and including this time")] = None,
        sort: Annotated[Optional[StrictStr], Field(description="Sorted by the greatest timestamps")] = None,
        limit: Optional[Annotated[int, Field(le=100, strict=True, ge=1)]] = None,
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get territory wars history for your faction

        Requires public access key. <br>

        :param cat: This parameter is deprecated. The territory wars list can now instead be fetched via 'faction' -> 'warfare' endpoint. This functionality will be removed on 1st of September 2025.
        :type cat: FactionTerritoryWarsCategoryEnum
        :param var_from: Timestamp that sets the lower limit for the data returned. Data returned will be after this time
        :type var_from: int
        :param to: Timestamp that sets the upper limit for the data returned. Data returned will be up to and including this time
        :type to: int
        :param sort: Sorted by the greatest timestamps
        :type sort: str
        :param limit:
        :type limit: int
        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._call_0258963246159d1e3e54547c32aac7c8_serialize(
            cat=cat,
            var_from=var_from,
            to=to,
            sort=sort,
            limit=limit,
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FactionTerritoryWarsResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _call_0258963246159d1e3e54547c32aac7c8_serialize(
        self,
        cat,
        var_from,
        to,
        sort,
        limit,
        timestamp,
        comment,
        key,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if cat is not None:
            
            _query_params.append(('cat', cat.value))
            
        if var_from is not None:
            
            _query_params.append(('from', var_from))
            
        if to is not None:
            
            _query_params.append(('to', to))
            
        if sort is not None:
            
            _query_params.append(('sort', sort))
            
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if timestamp is not None:
            
            _query_params.append(('timestamp', timestamp))
            
        if comment is not None:
            
            _query_params.append(('comment', comment))
            
        if key is not None:
            
            _query_params.append(('key', key))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'api_key'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/faction/territorywars',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def call_03d304564e4f84e3f258e5b8059bcc22(
        self,
        striptags: Annotated[Optional[StrictStr], Field(description="Determines if fields include HTML or not ('Hospitalized by <a href=...>user</a>' vs 'Hospitalized by user').")] = None,
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> FactionMembersResponse:
        """Get a list of your faction's members

        Requires public access key. <br> The 'revive_setting' value will be populated (not Unknown) if you have faction permissions (with custom, limited or full access keys), otherwise it will be set as 'Unknown'.

        :param striptags: Determines if fields include HTML or not ('Hospitalized by <a href=...>user</a>' vs 'Hospitalized by user').
        :type striptags: str
        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._call_03d304564e4f84e3f258e5b8059bcc22_serialize(
            striptags=striptags,
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FactionMembersResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def call_03d304564e4f84e3f258e5b8059bcc22_with_http_info(
        self,
        striptags: Annotated[Optional[StrictStr], Field(description="Determines if fields include HTML or not ('Hospitalized by <a href=...>user</a>' vs 'Hospitalized by user').")] = None,
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[FactionMembersResponse]:
        """Get a list of your faction's members

        Requires public access key. <br> The 'revive_setting' value will be populated (not Unknown) if you have faction permissions (with custom, limited or full access keys), otherwise it will be set as 'Unknown'.

        :param striptags: Determines if fields include HTML or not ('Hospitalized by <a href=...>user</a>' vs 'Hospitalized by user').
        :type striptags: str
        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._call_03d304564e4f84e3f258e5b8059bcc22_serialize(
            striptags=striptags,
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FactionMembersResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def call_03d304564e4f84e3f258e5b8059bcc22_without_preload_content(
        self,
        striptags: Annotated[Optional[StrictStr], Field(description="Determines if fields include HTML or not ('Hospitalized by <a href=...>user</a>' vs 'Hospitalized by user').")] = None,
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get a list of your faction's members

        Requires public access key. <br> The 'revive_setting' value will be populated (not Unknown) if you have faction permissions (with custom, limited or full access keys), otherwise it will be set as 'Unknown'.

        :param striptags: Determines if fields include HTML or not ('Hospitalized by <a href=...>user</a>' vs 'Hospitalized by user').
        :type striptags: str
        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._call_03d304564e4f84e3f258e5b8059bcc22_serialize(
            striptags=striptags,
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FactionMembersResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _call_03d304564e4f84e3f258e5b8059bcc22_serialize(
        self,
        striptags,
        timestamp,
        comment,
        key,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if striptags is not None:
            
            _query_params.append(('striptags', striptags))
            
        if timestamp is not None:
            
            _query_params.append(('timestamp', timestamp))
            
        if comment is not None:
            
            _query_params.append(('comment', comment))
            
        if key is not None:
            
            _query_params.append(('key', key))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'api_key'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/faction/members',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def call_065bcbaa654fc44ce7b8ea574b84f7b9(
        self,
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> FactionLookupResponse:
        """call_065bcbaa654fc44ce7b8ea574b84f7b9

        Requires public access key. <br>

        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._call_065bcbaa654fc44ce7b8ea574b84f7b9_serialize(
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FactionLookupResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def call_065bcbaa654fc44ce7b8ea574b84f7b9_with_http_info(
        self,
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[FactionLookupResponse]:
        """call_065bcbaa654fc44ce7b8ea574b84f7b9

        Requires public access key. <br>

        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._call_065bcbaa654fc44ce7b8ea574b84f7b9_serialize(
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FactionLookupResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def call_065bcbaa654fc44ce7b8ea574b84f7b9_without_preload_content(
        self,
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """call_065bcbaa654fc44ce7b8ea574b84f7b9

        Requires public access key. <br>

        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._call_065bcbaa654fc44ce7b8ea574b84f7b9_serialize(
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FactionLookupResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _call_065bcbaa654fc44ce7b8ea574b84f7b9_serialize(
        self,
        timestamp,
        comment,
        key,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if timestamp is not None:
            
            _query_params.append(('timestamp', timestamp))
            
        if comment is not None:
            
            _query_params.append(('comment', comment))
            
        if key is not None:
            
            _query_params.append(('key', key))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'api_key'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/faction/lookup',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def call_1da64889366de71140f2c15ad14b67b1(
        self,
        cat: Annotated[FactionNewsCategory, Field(description="News category type")],
        striptags: Annotated[Optional[StrictStr], Field(description="Determines if fields include HTML or not ('Hospitalized by <a href=...>user</a>' vs 'Hospitalized by user').")] = None,
        limit: Optional[Annotated[int, Field(le=100, strict=True, ge=1)]] = None,
        sort: Annotated[Optional[StrictStr], Field(description="Sorted by the greatest timestamps")] = None,
        to: Annotated[Optional[StrictInt], Field(description="Timestamp that sets the upper limit for the data returned. Data returned will be up to and including this time")] = None,
        var_from: Annotated[Optional[StrictInt], Field(description="Timestamp that sets the lower limit for the data returned. Data returned will be after this time")] = None,
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Minimal).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> FactionNewsResponse:
        """Get your faction's news details

        Requires minimal access key with faction API access permissions. <br> It is possible to pass up to 10 categories at the time (comma separated). Categories 'attack', 'depositFunds' and 'giveFunds' are only available with 'Custom', 'Limited' or 'Full' access keys.

        :param cat: News category type (required)
        :type cat: FactionNewsCategory
        :param striptags: Determines if fields include HTML or not ('Hospitalized by <a href=...>user</a>' vs 'Hospitalized by user').
        :type striptags: str
        :param limit:
        :type limit: int
        :param sort: Sorted by the greatest timestamps
        :type sort: str
        :param to: Timestamp that sets the upper limit for the data returned. Data returned will be up to and including this time
        :type to: int
        :param var_from: Timestamp that sets the lower limit for the data returned. Data returned will be after this time
        :type var_from: int
        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Minimal).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._call_1da64889366de71140f2c15ad14b67b1_serialize(
            cat=cat,
            striptags=striptags,
            limit=limit,
            sort=sort,
            to=to,
            var_from=var_from,
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FactionNewsResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def call_1da64889366de71140f2c15ad14b67b1_with_http_info(
        self,
        cat: Annotated[FactionNewsCategory, Field(description="News category type")],
        striptags: Annotated[Optional[StrictStr], Field(description="Determines if fields include HTML or not ('Hospitalized by <a href=...>user</a>' vs 'Hospitalized by user').")] = None,
        limit: Optional[Annotated[int, Field(le=100, strict=True, ge=1)]] = None,
        sort: Annotated[Optional[StrictStr], Field(description="Sorted by the greatest timestamps")] = None,
        to: Annotated[Optional[StrictInt], Field(description="Timestamp that sets the upper limit for the data returned. Data returned will be up to and including this time")] = None,
        var_from: Annotated[Optional[StrictInt], Field(description="Timestamp that sets the lower limit for the data returned. Data returned will be after this time")] = None,
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Minimal).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[FactionNewsResponse]:
        """Get your faction's news details

        Requires minimal access key with faction API access permissions. <br> It is possible to pass up to 10 categories at the time (comma separated). Categories 'attack', 'depositFunds' and 'giveFunds' are only available with 'Custom', 'Limited' or 'Full' access keys.

        :param cat: News category type (required)
        :type cat: FactionNewsCategory
        :param striptags: Determines if fields include HTML or not ('Hospitalized by <a href=...>user</a>' vs 'Hospitalized by user').
        :type striptags: str
        :param limit:
        :type limit: int
        :param sort: Sorted by the greatest timestamps
        :type sort: str
        :param to: Timestamp that sets the upper limit for the data returned. Data returned will be up to and including this time
        :type to: int
        :param var_from: Timestamp that sets the lower limit for the data returned. Data returned will be after this time
        :type var_from: int
        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Minimal).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._call_1da64889366de71140f2c15ad14b67b1_serialize(
            cat=cat,
            striptags=striptags,
            limit=limit,
            sort=sort,
            to=to,
            var_from=var_from,
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FactionNewsResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def call_1da64889366de71140f2c15ad14b67b1_without_preload_content(
        self,
        cat: Annotated[FactionNewsCategory, Field(description="News category type")],
        striptags: Annotated[Optional[StrictStr], Field(description="Determines if fields include HTML or not ('Hospitalized by <a href=...>user</a>' vs 'Hospitalized by user').")] = None,
        limit: Optional[Annotated[int, Field(le=100, strict=True, ge=1)]] = None,
        sort: Annotated[Optional[StrictStr], Field(description="Sorted by the greatest timestamps")] = None,
        to: Annotated[Optional[StrictInt], Field(description="Timestamp that sets the upper limit for the data returned. Data returned will be up to and including this time")] = None,
        var_from: Annotated[Optional[StrictInt], Field(description="Timestamp that sets the lower limit for the data returned. Data returned will be after this time")] = None,
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Minimal).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get your faction's news details

        Requires minimal access key with faction API access permissions. <br> It is possible to pass up to 10 categories at the time (comma separated). Categories 'attack', 'depositFunds' and 'giveFunds' are only available with 'Custom', 'Limited' or 'Full' access keys.

        :param cat: News category type (required)
        :type cat: FactionNewsCategory
        :param striptags: Determines if fields include HTML or not ('Hospitalized by <a href=...>user</a>' vs 'Hospitalized by user').
        :type striptags: str
        :param limit:
        :type limit: int
        :param sort: Sorted by the greatest timestamps
        :type sort: str
        :param to: Timestamp that sets the upper limit for the data returned. Data returned will be up to and including this time
        :type to: int
        :param var_from: Timestamp that sets the lower limit for the data returned. Data returned will be after this time
        :type var_from: int
        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Minimal).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._call_1da64889366de71140f2c15ad14b67b1_serialize(
            cat=cat,
            striptags=striptags,
            limit=limit,
            sort=sort,
            to=to,
            var_from=var_from,
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FactionNewsResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _call_1da64889366de71140f2c15ad14b67b1_serialize(
        self,
        cat,
        striptags,
        limit,
        sort,
        to,
        var_from,
        timestamp,
        comment,
        key,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if striptags is not None:
            
            _query_params.append(('striptags', striptags))
            
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if sort is not None:
            
            _query_params.append(('sort', sort))
            
        if to is not None:
            
            _query_params.append(('to', to))
            
        if var_from is not None:
            
            _query_params.append(('from', var_from))
            
        if cat is not None:
            
            _query_params.append(('cat', cat.value))
            
        if timestamp is not None:
            
            _query_params.append(('timestamp', timestamp))
            
        if comment is not None:
            
            _query_params.append(('comment', comment))
            
        if key is not None:
            
            _query_params.append(('key', key))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'api_key'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/faction/news',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def call_21a251c2ec9f6c93b89fb715196bb8be(
        self,
        chain_id: Annotated[StrictInt, Field(description="Chain id")],
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> FactionChainReportResponse:
        """Get a chain report

        Requires public access key. <br> Chain reports for ongoing chains are available only for your own faction.

        :param chain_id: Chain id (required)
        :type chain_id: int
        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._call_21a251c2ec9f6c93b89fb715196bb8be_serialize(
            chain_id=chain_id,
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FactionChainReportResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def call_21a251c2ec9f6c93b89fb715196bb8be_with_http_info(
        self,
        chain_id: Annotated[StrictInt, Field(description="Chain id")],
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[FactionChainReportResponse]:
        """Get a chain report

        Requires public access key. <br> Chain reports for ongoing chains are available only for your own faction.

        :param chain_id: Chain id (required)
        :type chain_id: int
        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._call_21a251c2ec9f6c93b89fb715196bb8be_serialize(
            chain_id=chain_id,
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FactionChainReportResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def call_21a251c2ec9f6c93b89fb715196bb8be_without_preload_content(
        self,
        chain_id: Annotated[StrictInt, Field(description="Chain id")],
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get a chain report

        Requires public access key. <br> Chain reports for ongoing chains are available only for your own faction.

        :param chain_id: Chain id (required)
        :type chain_id: int
        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._call_21a251c2ec9f6c93b89fb715196bb8be_serialize(
            chain_id=chain_id,
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FactionChainReportResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _call_21a251c2ec9f6c93b89fb715196bb8be_serialize(
        self,
        chain_id,
        timestamp,
        comment,
        key,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if chain_id is not None:
            _path_params['chainId'] = chain_id
        # process the query parameters
        if timestamp is not None:
            
            _query_params.append(('timestamp', timestamp))
            
        if comment is not None:
            
            _query_params.append(('comment', comment))
            
        if key is not None:
            
            _query_params.append(('key', key))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'api_key'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/faction/{chainId}/chainreport',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def call_3ca2c0319f960b728ffece8e322cf40f(
        self,
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Limited).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> FactionBalanceResponse:
        """Get your faction's & member's balance details

        Requires limited access key with faction API access permissions. <br>

        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Limited).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._call_3ca2c0319f960b728ffece8e322cf40f_serialize(
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FactionBalanceResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def call_3ca2c0319f960b728ffece8e322cf40f_with_http_info(
        self,
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Limited).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[FactionBalanceResponse]:
        """Get your faction's & member's balance details

        Requires limited access key with faction API access permissions. <br>

        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Limited).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._call_3ca2c0319f960b728ffece8e322cf40f_serialize(
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FactionBalanceResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def call_3ca2c0319f960b728ffece8e322cf40f_without_preload_content(
        self,
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Limited).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get your faction's & member's balance details

        Requires limited access key with faction API access permissions. <br>

        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Limited).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._call_3ca2c0319f960b728ffece8e322cf40f_serialize(
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FactionBalanceResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _call_3ca2c0319f960b728ffece8e322cf40f_serialize(
        self,
        timestamp,
        comment,
        key,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if timestamp is not None:
            
            _query_params.append(('timestamp', timestamp))
            
        if comment is not None:
            
            _query_params.append(('comment', comment))
            
        if key is not None:
            
            _query_params.append(('key', key))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'api_key'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/faction/balance',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def call_40eb7627818eb777fdc713ed78209c6b(
        self,
        stat: Annotated[FactionStatEnum, Field(description="Get contributors for this field.")],
        cat: Annotated[Optional[StrictStr], Field(description="By default, this selection will return only current faction's member contributions, and the option 'all' will return all contributors.")] = None,
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> FactionContributorsResponse:
        """Get your faction's challenge contributors

        Requires limiteed access key with faction API access permissions. <br>

        :param stat: Get contributors for this field. (required)
        :type stat: FactionStatEnum
        :param cat: By default, this selection will return only current faction's member contributions, and the option 'all' will return all contributors.
        :type cat: str
        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._call_40eb7627818eb777fdc713ed78209c6b_serialize(
            stat=stat,
            cat=cat,
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FactionContributorsResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def call_40eb7627818eb777fdc713ed78209c6b_with_http_info(
        self,
        stat: Annotated[FactionStatEnum, Field(description="Get contributors for this field.")],
        cat: Annotated[Optional[StrictStr], Field(description="By default, this selection will return only current faction's member contributions, and the option 'all' will return all contributors.")] = None,
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[FactionContributorsResponse]:
        """Get your faction's challenge contributors

        Requires limiteed access key with faction API access permissions. <br>

        :param stat: Get contributors for this field. (required)
        :type stat: FactionStatEnum
        :param cat: By default, this selection will return only current faction's member contributions, and the option 'all' will return all contributors.
        :type cat: str
        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._call_40eb7627818eb777fdc713ed78209c6b_serialize(
            stat=stat,
            cat=cat,
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FactionContributorsResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def call_40eb7627818eb777fdc713ed78209c6b_without_preload_content(
        self,
        stat: Annotated[FactionStatEnum, Field(description="Get contributors for this field.")],
        cat: Annotated[Optional[StrictStr], Field(description="By default, this selection will return only current faction's member contributions, and the option 'all' will return all contributors.")] = None,
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get your faction's challenge contributors

        Requires limiteed access key with faction API access permissions. <br>

        :param stat: Get contributors for this field. (required)
        :type stat: FactionStatEnum
        :param cat: By default, this selection will return only current faction's member contributions, and the option 'all' will return all contributors.
        :type cat: str
        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._call_40eb7627818eb777fdc713ed78209c6b_serialize(
            stat=stat,
            cat=cat,
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FactionContributorsResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _call_40eb7627818eb777fdc713ed78209c6b_serialize(
        self,
        stat,
        cat,
        timestamp,
        comment,
        key,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if stat is not None:
            
            _query_params.append(('stat', stat.value))
            
        if cat is not None:
            
            _query_params.append(('cat', cat))
            
        if timestamp is not None:
            
            _query_params.append(('timestamp', timestamp))
            
        if comment is not None:
            
            _query_params.append(('comment', comment))
            
        if key is not None:
            
            _query_params.append(('key', key))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'api_key'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/faction/contributors',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def call_486fcda26ed1aa6aba8ec7091080723b(
        self,
        limit: Optional[Annotated[int, Field(le=100, strict=True, ge=1)]] = None,
        sort: Annotated[Optional[StrictStr], Field(description="Sorted by the greatest timestamps")] = None,
        to: Annotated[Optional[StrictInt], Field(description="Timestamp that sets the upper limit for the data returned. Data returned will be up to and including this time")] = None,
        var_from: Annotated[Optional[StrictInt], Field(description="Timestamp that sets the lower limit for the data returned. Data returned will be after this time")] = None,
        striptags: Annotated[Optional[StrictStr], Field(description="Determines if fields include HTML or not ('Hospitalized by <a href=...>user</a>' vs 'Hospitalized by user').")] = None,
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Limited).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RevivesResponse:
        """Get your faction's detailed revives

        Requires limited access key with faction API access permissions. <br>

        :param limit:
        :type limit: int
        :param sort: Sorted by the greatest timestamps
        :type sort: str
        :param to: Timestamp that sets the upper limit for the data returned. Data returned will be up to and including this time
        :type to: int
        :param var_from: Timestamp that sets the lower limit for the data returned. Data returned will be after this time
        :type var_from: int
        :param striptags: Determines if fields include HTML or not ('Hospitalized by <a href=...>user</a>' vs 'Hospitalized by user').
        :type striptags: str
        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Limited).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._call_486fcda26ed1aa6aba8ec7091080723b_serialize(
            limit=limit,
            sort=sort,
            to=to,
            var_from=var_from,
            striptags=striptags,
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "RevivesResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def call_486fcda26ed1aa6aba8ec7091080723b_with_http_info(
        self,
        limit: Optional[Annotated[int, Field(le=100, strict=True, ge=1)]] = None,
        sort: Annotated[Optional[StrictStr], Field(description="Sorted by the greatest timestamps")] = None,
        to: Annotated[Optional[StrictInt], Field(description="Timestamp that sets the upper limit for the data returned. Data returned will be up to and including this time")] = None,
        var_from: Annotated[Optional[StrictInt], Field(description="Timestamp that sets the lower limit for the data returned. Data returned will be after this time")] = None,
        striptags: Annotated[Optional[StrictStr], Field(description="Determines if fields include HTML or not ('Hospitalized by <a href=...>user</a>' vs 'Hospitalized by user').")] = None,
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Limited).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[RevivesResponse]:
        """Get your faction's detailed revives

        Requires limited access key with faction API access permissions. <br>

        :param limit:
        :type limit: int
        :param sort: Sorted by the greatest timestamps
        :type sort: str
        :param to: Timestamp that sets the upper limit for the data returned. Data returned will be up to and including this time
        :type to: int
        :param var_from: Timestamp that sets the lower limit for the data returned. Data returned will be after this time
        :type var_from: int
        :param striptags: Determines if fields include HTML or not ('Hospitalized by <a href=...>user</a>' vs 'Hospitalized by user').
        :type striptags: str
        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Limited).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._call_486fcda26ed1aa6aba8ec7091080723b_serialize(
            limit=limit,
            sort=sort,
            to=to,
            var_from=var_from,
            striptags=striptags,
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "RevivesResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def call_486fcda26ed1aa6aba8ec7091080723b_without_preload_content(
        self,
        limit: Optional[Annotated[int, Field(le=100, strict=True, ge=1)]] = None,
        sort: Annotated[Optional[StrictStr], Field(description="Sorted by the greatest timestamps")] = None,
        to: Annotated[Optional[StrictInt], Field(description="Timestamp that sets the upper limit for the data returned. Data returned will be up to and including this time")] = None,
        var_from: Annotated[Optional[StrictInt], Field(description="Timestamp that sets the lower limit for the data returned. Data returned will be after this time")] = None,
        striptags: Annotated[Optional[StrictStr], Field(description="Determines if fields include HTML or not ('Hospitalized by <a href=...>user</a>' vs 'Hospitalized by user').")] = None,
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Limited).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get your faction's detailed revives

        Requires limited access key with faction API access permissions. <br>

        :param limit:
        :type limit: int
        :param sort: Sorted by the greatest timestamps
        :type sort: str
        :param to: Timestamp that sets the upper limit for the data returned. Data returned will be up to and including this time
        :type to: int
        :param var_from: Timestamp that sets the lower limit for the data returned. Data returned will be after this time
        :type var_from: int
        :param striptags: Determines if fields include HTML or not ('Hospitalized by <a href=...>user</a>' vs 'Hospitalized by user').
        :type striptags: str
        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Limited).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._call_486fcda26ed1aa6aba8ec7091080723b_serialize(
            limit=limit,
            sort=sort,
            to=to,
            var_from=var_from,
            striptags=striptags,
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "RevivesResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _call_486fcda26ed1aa6aba8ec7091080723b_serialize(
        self,
        limit,
        sort,
        to,
        var_from,
        striptags,
        timestamp,
        comment,
        key,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if sort is not None:
            
            _query_params.append(('sort', sort))
            
        if to is not None:
            
            _query_params.append(('to', to))
            
        if var_from is not None:
            
            _query_params.append(('from', var_from))
            
        if striptags is not None:
            
            _query_params.append(('striptags', striptags))
            
        if timestamp is not None:
            
            _query_params.append(('timestamp', timestamp))
            
        if comment is not None:
            
            _query_params.append(('comment', comment))
            
        if key is not None:
            
            _query_params.append(('key', key))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'api_key'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/faction/revives',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def call_4dce518364dad91fb3503e0382adfadf(
        self,
        id: Annotated[StrictInt, Field(description="Faction id")],
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> FactionTerritoriesResponse:
        """Get a list of a faction's territories

        Requires public access key. <br>

        :param id: Faction id (required)
        :type id: int
        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._call_4dce518364dad91fb3503e0382adfadf_serialize(
            id=id,
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FactionTerritoriesResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def call_4dce518364dad91fb3503e0382adfadf_with_http_info(
        self,
        id: Annotated[StrictInt, Field(description="Faction id")],
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[FactionTerritoriesResponse]:
        """Get a list of a faction's territories

        Requires public access key. <br>

        :param id: Faction id (required)
        :type id: int
        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._call_4dce518364dad91fb3503e0382adfadf_serialize(
            id=id,
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FactionTerritoriesResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def call_4dce518364dad91fb3503e0382adfadf_without_preload_content(
        self,
        id: Annotated[StrictInt, Field(description="Faction id")],
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get a list of a faction's territories

        Requires public access key. <br>

        :param id: Faction id (required)
        :type id: int
        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._call_4dce518364dad91fb3503e0382adfadf_serialize(
            id=id,
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FactionTerritoriesResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _call_4dce518364dad91fb3503e0382adfadf_serialize(
        self,
        id,
        timestamp,
        comment,
        key,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        if timestamp is not None:
            
            _query_params.append(('timestamp', timestamp))
            
        if comment is not None:
            
            _query_params.append(('comment', comment))
            
        if key is not None:
            
            _query_params.append(('key', key))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'api_key'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/faction/{id}/territory',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def call_4e8aeafde7b5fc9918d166cda150fa91(
        self,
        territory_war_id: Annotated[StrictInt, Field(description="Territory war id")],
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> FactionTerritoryWarReportResponse:
        """Get territory war details

        Requires public access key. <br> 

        :param territory_war_id: Territory war id (required)
        :type territory_war_id: int
        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._call_4e8aeafde7b5fc9918d166cda150fa91_serialize(
            territory_war_id=territory_war_id,
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FactionTerritoryWarReportResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def call_4e8aeafde7b5fc9918d166cda150fa91_with_http_info(
        self,
        territory_war_id: Annotated[StrictInt, Field(description="Territory war id")],
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[FactionTerritoryWarReportResponse]:
        """Get territory war details

        Requires public access key. <br> 

        :param territory_war_id: Territory war id (required)
        :type territory_war_id: int
        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._call_4e8aeafde7b5fc9918d166cda150fa91_serialize(
            territory_war_id=territory_war_id,
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FactionTerritoryWarReportResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def call_4e8aeafde7b5fc9918d166cda150fa91_without_preload_content(
        self,
        territory_war_id: Annotated[StrictInt, Field(description="Territory war id")],
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get territory war details

        Requires public access key. <br> 

        :param territory_war_id: Territory war id (required)
        :type territory_war_id: int
        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._call_4e8aeafde7b5fc9918d166cda150fa91_serialize(
            territory_war_id=territory_war_id,
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FactionTerritoryWarReportResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _call_4e8aeafde7b5fc9918d166cda150fa91_serialize(
        self,
        territory_war_id,
        timestamp,
        comment,
        key,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if territory_war_id is not None:
            _path_params['territoryWarId'] = territory_war_id
        # process the query parameters
        if timestamp is not None:
            
            _query_params.append(('timestamp', timestamp))
            
        if comment is not None:
            
            _query_params.append(('comment', comment))
            
        if key is not None:
            
            _query_params.append(('key', key))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'api_key'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/faction/{territoryWarId}/territorywarreport',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def call_4f5d624a86e2d389a7a738b6b3ce8c9e(
        self,
        cat: Annotated[Optional[FactionRankedWarsCategoryEnum], Field(description="This parameter is deprecated. The ranked wars list can now instead be fetched via 'faction' -> 'warfare' endpoint. This functionality will be removed on 1st of September 2025.")] = None,
        var_from: Annotated[Optional[StrictInt], Field(description="Timestamp that sets the lower limit for the data returned. Data returned will be after this time")] = None,
        to: Annotated[Optional[StrictInt], Field(description="Timestamp that sets the upper limit for the data returned. Data returned will be up to and including this time")] = None,
        sort: Annotated[Optional[StrictStr], Field(description="Sorted by the greatest timestamps")] = None,
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> FactionRankedWarResponse:
        """Get ranked wars history for your faction

        Requires public access key. <br>

        :param cat: This parameter is deprecated. The ranked wars list can now instead be fetched via 'faction' -> 'warfare' endpoint. This functionality will be removed on 1st of September 2025.
        :type cat: FactionRankedWarsCategoryEnum
        :param var_from: Timestamp that sets the lower limit for the data returned. Data returned will be after this time
        :type var_from: int
        :param to: Timestamp that sets the upper limit for the data returned. Data returned will be up to and including this time
        :type to: int
        :param sort: Sorted by the greatest timestamps
        :type sort: str
        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._call_4f5d624a86e2d389a7a738b6b3ce8c9e_serialize(
            cat=cat,
            var_from=var_from,
            to=to,
            sort=sort,
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FactionRankedWarResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def call_4f5d624a86e2d389a7a738b6b3ce8c9e_with_http_info(
        self,
        cat: Annotated[Optional[FactionRankedWarsCategoryEnum], Field(description="This parameter is deprecated. The ranked wars list can now instead be fetched via 'faction' -> 'warfare' endpoint. This functionality will be removed on 1st of September 2025.")] = None,
        var_from: Annotated[Optional[StrictInt], Field(description="Timestamp that sets the lower limit for the data returned. Data returned will be after this time")] = None,
        to: Annotated[Optional[StrictInt], Field(description="Timestamp that sets the upper limit for the data returned. Data returned will be up to and including this time")] = None,
        sort: Annotated[Optional[StrictStr], Field(description="Sorted by the greatest timestamps")] = None,
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[FactionRankedWarResponse]:
        """Get ranked wars history for your faction

        Requires public access key. <br>

        :param cat: This parameter is deprecated. The ranked wars list can now instead be fetched via 'faction' -> 'warfare' endpoint. This functionality will be removed on 1st of September 2025.
        :type cat: FactionRankedWarsCategoryEnum
        :param var_from: Timestamp that sets the lower limit for the data returned. Data returned will be after this time
        :type var_from: int
        :param to: Timestamp that sets the upper limit for the data returned. Data returned will be up to and including this time
        :type to: int
        :param sort: Sorted by the greatest timestamps
        :type sort: str
        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._call_4f5d624a86e2d389a7a738b6b3ce8c9e_serialize(
            cat=cat,
            var_from=var_from,
            to=to,
            sort=sort,
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FactionRankedWarResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def call_4f5d624a86e2d389a7a738b6b3ce8c9e_without_preload_content(
        self,
        cat: Annotated[Optional[FactionRankedWarsCategoryEnum], Field(description="This parameter is deprecated. The ranked wars list can now instead be fetched via 'faction' -> 'warfare' endpoint. This functionality will be removed on 1st of September 2025.")] = None,
        var_from: Annotated[Optional[StrictInt], Field(description="Timestamp that sets the lower limit for the data returned. Data returned will be after this time")] = None,
        to: Annotated[Optional[StrictInt], Field(description="Timestamp that sets the upper limit for the data returned. Data returned will be up to and including this time")] = None,
        sort: Annotated[Optional[StrictStr], Field(description="Sorted by the greatest timestamps")] = None,
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get ranked wars history for your faction

        Requires public access key. <br>

        :param cat: This parameter is deprecated. The ranked wars list can now instead be fetched via 'faction' -> 'warfare' endpoint. This functionality will be removed on 1st of September 2025.
        :type cat: FactionRankedWarsCategoryEnum
        :param var_from: Timestamp that sets the lower limit for the data returned. Data returned will be after this time
        :type var_from: int
        :param to: Timestamp that sets the upper limit for the data returned. Data returned will be up to and including this time
        :type to: int
        :param sort: Sorted by the greatest timestamps
        :type sort: str
        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._call_4f5d624a86e2d389a7a738b6b3ce8c9e_serialize(
            cat=cat,
            var_from=var_from,
            to=to,
            sort=sort,
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FactionRankedWarResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _call_4f5d624a86e2d389a7a738b6b3ce8c9e_serialize(
        self,
        cat,
        var_from,
        to,
        sort,
        timestamp,
        comment,
        key,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if cat is not None:
            
            _query_params.append(('cat', cat.value))
            
        if var_from is not None:
            
            _query_params.append(('from', var_from))
            
        if to is not None:
            
            _query_params.append(('to', to))
            
        if sort is not None:
            
            _query_params.append(('sort', sort))
            
        if timestamp is not None:
            
            _query_params.append(('timestamp', timestamp))
            
        if comment is not None:
            
            _query_params.append(('comment', comment))
            
        if key is not None:
            
            _query_params.append(('key', key))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'api_key'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/faction/rankedwars',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def call_5b6646714e5ae1cc397bdec877f55691(
        self,
        id: Annotated[StrictInt, Field(description="Faction id")],
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> FactionRankedWarResponse:
        """Get a faction's ranked wars history

        Requires public access key. <br> 

        :param id: Faction id (required)
        :type id: int
        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._call_5b6646714e5ae1cc397bdec877f55691_serialize(
            id=id,
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FactionRankedWarResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def call_5b6646714e5ae1cc397bdec877f55691_with_http_info(
        self,
        id: Annotated[StrictInt, Field(description="Faction id")],
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[FactionRankedWarResponse]:
        """Get a faction's ranked wars history

        Requires public access key. <br> 

        :param id: Faction id (required)
        :type id: int
        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._call_5b6646714e5ae1cc397bdec877f55691_serialize(
            id=id,
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FactionRankedWarResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def call_5b6646714e5ae1cc397bdec877f55691_without_preload_content(
        self,
        id: Annotated[StrictInt, Field(description="Faction id")],
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get a faction's ranked wars history

        Requires public access key. <br> 

        :param id: Faction id (required)
        :type id: int
        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._call_5b6646714e5ae1cc397bdec877f55691_serialize(
            id=id,
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FactionRankedWarResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _call_5b6646714e5ae1cc397bdec877f55691_serialize(
        self,
        id,
        timestamp,
        comment,
        key,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        if timestamp is not None:
            
            _query_params.append(('timestamp', timestamp))
            
        if comment is not None:
            
            _query_params.append(('comment', comment))
            
        if key is not None:
            
            _query_params.append(('key', key))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'api_key'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/faction/{id}/rankedwars',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def call_614a2f2bdd7fb6df778b7657c75d1113(
        self,
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> FactionChainReportResponse:
        """Get your faction's latest chain report

        Requires public access key. <br> This includes currently ongoing chains.

        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._call_614a2f2bdd7fb6df778b7657c75d1113_serialize(
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FactionChainReportResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def call_614a2f2bdd7fb6df778b7657c75d1113_with_http_info(
        self,
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[FactionChainReportResponse]:
        """Get your faction's latest chain report

        Requires public access key. <br> This includes currently ongoing chains.

        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._call_614a2f2bdd7fb6df778b7657c75d1113_serialize(
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FactionChainReportResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def call_614a2f2bdd7fb6df778b7657c75d1113_without_preload_content(
        self,
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get your faction's latest chain report

        Requires public access key. <br> This includes currently ongoing chains.

        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._call_614a2f2bdd7fb6df778b7657c75d1113_serialize(
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FactionChainReportResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _call_614a2f2bdd7fb6df778b7657c75d1113_serialize(
        self,
        timestamp,
        comment,
        key,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if timestamp is not None:
            
            _query_params.append(('timestamp', timestamp))
            
        if comment is not None:
            
            _query_params.append(('comment', comment))
            
        if key is not None:
            
            _query_params.append(('key', key))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'api_key'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/faction/chainreport',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def call_627df4d7d8b91c62dacb66ff373aab5c(
        self,
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> TimestampResponse:
        """Get current server time

        Requires public access key. <br>

        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._call_627df4d7d8b91c62dacb66ff373aab5c_serialize(
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TimestampResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def call_627df4d7d8b91c62dacb66ff373aab5c_with_http_info(
        self,
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[TimestampResponse]:
        """Get current server time

        Requires public access key. <br>

        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._call_627df4d7d8b91c62dacb66ff373aab5c_serialize(
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TimestampResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def call_627df4d7d8b91c62dacb66ff373aab5c_without_preload_content(
        self,
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get current server time

        Requires public access key. <br>

        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._call_627df4d7d8b91c62dacb66ff373aab5c_serialize(
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TimestampResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _call_627df4d7d8b91c62dacb66ff373aab5c_serialize(
        self,
        timestamp,
        comment,
        key,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if timestamp is not None:
            
            _query_params.append(('timestamp', timestamp))
            
        if comment is not None:
            
            _query_params.append(('comment', comment))
            
        if key is not None:
            
            _query_params.append(('key', key))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'api_key'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/faction/timestamp',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def call_67622543dbbc4857f1ea575be5af7fcd(
        self,
        id: Annotated[StrictInt, Field(description="Faction id")],
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> FactionRaidsResponse:
        """Get a faction's raids history

        Requires public access key. <br> 

        :param id: Faction id (required)
        :type id: int
        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._call_67622543dbbc4857f1ea575be5af7fcd_serialize(
            id=id,
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FactionRaidsResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def call_67622543dbbc4857f1ea575be5af7fcd_with_http_info(
        self,
        id: Annotated[StrictInt, Field(description="Faction id")],
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[FactionRaidsResponse]:
        """Get a faction's raids history

        Requires public access key. <br> 

        :param id: Faction id (required)
        :type id: int
        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._call_67622543dbbc4857f1ea575be5af7fcd_serialize(
            id=id,
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FactionRaidsResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def call_67622543dbbc4857f1ea575be5af7fcd_without_preload_content(
        self,
        id: Annotated[StrictInt, Field(description="Faction id")],
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get a faction's raids history

        Requires public access key. <br> 

        :param id: Faction id (required)
        :type id: int
        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._call_67622543dbbc4857f1ea575be5af7fcd_serialize(
            id=id,
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FactionRaidsResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _call_67622543dbbc4857f1ea575be5af7fcd_serialize(
        self,
        id,
        timestamp,
        comment,
        key,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        if timestamp is not None:
            
            _query_params.append(('timestamp', timestamp))
            
        if comment is not None:
            
            _query_params.append(('comment', comment))
            
        if key is not None:
            
            _query_params.append(('key', key))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'api_key'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/faction/{id}/raids',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def call_6a2b0604d0ebe31933f93facfa69f171(
        self,
        var_from: Annotated[Optional[StrictInt], Field(description="Timestamp that sets the lower limit for the data returned. Data returned will be after this time")] = None,
        to: Annotated[Optional[StrictInt], Field(description="Timestamp that sets the upper limit for the data returned. Data returned will be up to and including this time")] = None,
        sort: Annotated[Optional[StrictStr], Field(description="Sorted by the greatest timestamps")] = None,
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> FactionRaidsResponse:
        """Get raids history for your faction

        Requires public access key. <br>

        :param var_from: Timestamp that sets the lower limit for the data returned. Data returned will be after this time
        :type var_from: int
        :param to: Timestamp that sets the upper limit for the data returned. Data returned will be up to and including this time
        :type to: int
        :param sort: Sorted by the greatest timestamps
        :type sort: str
        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._call_6a2b0604d0ebe31933f93facfa69f171_serialize(
            var_from=var_from,
            to=to,
            sort=sort,
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FactionRaidsResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def call_6a2b0604d0ebe31933f93facfa69f171_with_http_info(
        self,
        var_from: Annotated[Optional[StrictInt], Field(description="Timestamp that sets the lower limit for the data returned. Data returned will be after this time")] = None,
        to: Annotated[Optional[StrictInt], Field(description="Timestamp that sets the upper limit for the data returned. Data returned will be up to and including this time")] = None,
        sort: Annotated[Optional[StrictStr], Field(description="Sorted by the greatest timestamps")] = None,
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[FactionRaidsResponse]:
        """Get raids history for your faction

        Requires public access key. <br>

        :param var_from: Timestamp that sets the lower limit for the data returned. Data returned will be after this time
        :type var_from: int
        :param to: Timestamp that sets the upper limit for the data returned. Data returned will be up to and including this time
        :type to: int
        :param sort: Sorted by the greatest timestamps
        :type sort: str
        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._call_6a2b0604d0ebe31933f93facfa69f171_serialize(
            var_from=var_from,
            to=to,
            sort=sort,
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FactionRaidsResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def call_6a2b0604d0ebe31933f93facfa69f171_without_preload_content(
        self,
        var_from: Annotated[Optional[StrictInt], Field(description="Timestamp that sets the lower limit for the data returned. Data returned will be after this time")] = None,
        to: Annotated[Optional[StrictInt], Field(description="Timestamp that sets the upper limit for the data returned. Data returned will be up to and including this time")] = None,
        sort: Annotated[Optional[StrictStr], Field(description="Sorted by the greatest timestamps")] = None,
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get raids history for your faction

        Requires public access key. <br>

        :param var_from: Timestamp that sets the lower limit for the data returned. Data returned will be after this time
        :type var_from: int
        :param to: Timestamp that sets the upper limit for the data returned. Data returned will be up to and including this time
        :type to: int
        :param sort: Sorted by the greatest timestamps
        :type sort: str
        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._call_6a2b0604d0ebe31933f93facfa69f171_serialize(
            var_from=var_from,
            to=to,
            sort=sort,
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FactionRaidsResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _call_6a2b0604d0ebe31933f93facfa69f171_serialize(
        self,
        var_from,
        to,
        sort,
        timestamp,
        comment,
        key,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if var_from is not None:
            
            _query_params.append(('from', var_from))
            
        if to is not None:
            
            _query_params.append(('to', to))
            
        if sort is not None:
            
            _query_params.append(('sort', sort))
            
        if timestamp is not None:
            
            _query_params.append(('timestamp', timestamp))
            
        if comment is not None:
            
            _query_params.append(('comment', comment))
            
        if key is not None:
            
            _query_params.append(('key', key))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'api_key'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/faction/raids',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def call_72e5db8a773908fedff4bb002f3f4406(
        self,
        cat: Annotated[Optional[StrictStr], Field(description="Category of organized crimes returned. Category 'available' includes both 'recruiting' & 'planning', and category 'completed' includes both 'successful' & 'failure'<br>Default category is 'all'.")] = None,
        filters: Annotated[Optional[StrictStr], Field(description="It's possible to set this parameter to specify a field used for the sort, from & to query parameters. If not specified, the field will default to the category sorting as described above.")] = None,
        offset: Optional[Annotated[int, Field(strict=True, ge=0)]] = None,
        var_from: Annotated[Optional[StrictInt], Field(description="Timestamp that sets the lower limit for the data returned. Data returned will be after this time")] = None,
        to: Annotated[Optional[StrictInt], Field(description="Timestamp that sets the upper limit for the data returned. Data returned will be up to and including this time")] = None,
        sort: Annotated[Optional[StrictStr], Field(description="Sorted by the greatest timestamps")] = None,
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Minimal).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> FactionCrimesResponse:
        """Get your faction's organized crimes

        Requires minimal access key with faction API access permissions. <br> It's possible to get older entries either by timestamp range (from, to) or with offset.<br> Crimes are ordered depending on the category chosen:  * For categories 'all' & 'available', the ordering field is 'created_at'.  * For categories 'successful', 'failed' & 'completed', the ordering field is 'executed_at'.  * For categories 'recruiting' & 'expired', the ordering field is 'expired_at'.  * For category 'planning', the ordering field is 'ready_at'.

        :param cat: Category of organized crimes returned. Category 'available' includes both 'recruiting' & 'planning', and category 'completed' includes both 'successful' & 'failure'<br>Default category is 'all'.
        :type cat: str
        :param filters: It's possible to set this parameter to specify a field used for the sort, from & to query parameters. If not specified, the field will default to the category sorting as described above.
        :type filters: str
        :param offset:
        :type offset: int
        :param var_from: Timestamp that sets the lower limit for the data returned. Data returned will be after this time
        :type var_from: int
        :param to: Timestamp that sets the upper limit for the data returned. Data returned will be up to and including this time
        :type to: int
        :param sort: Sorted by the greatest timestamps
        :type sort: str
        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Minimal).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._call_72e5db8a773908fedff4bb002f3f4406_serialize(
            cat=cat,
            filters=filters,
            offset=offset,
            var_from=var_from,
            to=to,
            sort=sort,
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FactionCrimesResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def call_72e5db8a773908fedff4bb002f3f4406_with_http_info(
        self,
        cat: Annotated[Optional[StrictStr], Field(description="Category of organized crimes returned. Category 'available' includes both 'recruiting' & 'planning', and category 'completed' includes both 'successful' & 'failure'<br>Default category is 'all'.")] = None,
        filters: Annotated[Optional[StrictStr], Field(description="It's possible to set this parameter to specify a field used for the sort, from & to query parameters. If not specified, the field will default to the category sorting as described above.")] = None,
        offset: Optional[Annotated[int, Field(strict=True, ge=0)]] = None,
        var_from: Annotated[Optional[StrictInt], Field(description="Timestamp that sets the lower limit for the data returned. Data returned will be after this time")] = None,
        to: Annotated[Optional[StrictInt], Field(description="Timestamp that sets the upper limit for the data returned. Data returned will be up to and including this time")] = None,
        sort: Annotated[Optional[StrictStr], Field(description="Sorted by the greatest timestamps")] = None,
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Minimal).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[FactionCrimesResponse]:
        """Get your faction's organized crimes

        Requires minimal access key with faction API access permissions. <br> It's possible to get older entries either by timestamp range (from, to) or with offset.<br> Crimes are ordered depending on the category chosen:  * For categories 'all' & 'available', the ordering field is 'created_at'.  * For categories 'successful', 'failed' & 'completed', the ordering field is 'executed_at'.  * For categories 'recruiting' & 'expired', the ordering field is 'expired_at'.  * For category 'planning', the ordering field is 'ready_at'.

        :param cat: Category of organized crimes returned. Category 'available' includes both 'recruiting' & 'planning', and category 'completed' includes both 'successful' & 'failure'<br>Default category is 'all'.
        :type cat: str
        :param filters: It's possible to set this parameter to specify a field used for the sort, from & to query parameters. If not specified, the field will default to the category sorting as described above.
        :type filters: str
        :param offset:
        :type offset: int
        :param var_from: Timestamp that sets the lower limit for the data returned. Data returned will be after this time
        :type var_from: int
        :param to: Timestamp that sets the upper limit for the data returned. Data returned will be up to and including this time
        :type to: int
        :param sort: Sorted by the greatest timestamps
        :type sort: str
        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Minimal).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._call_72e5db8a773908fedff4bb002f3f4406_serialize(
            cat=cat,
            filters=filters,
            offset=offset,
            var_from=var_from,
            to=to,
            sort=sort,
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FactionCrimesResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def call_72e5db8a773908fedff4bb002f3f4406_without_preload_content(
        self,
        cat: Annotated[Optional[StrictStr], Field(description="Category of organized crimes returned. Category 'available' includes both 'recruiting' & 'planning', and category 'completed' includes both 'successful' & 'failure'<br>Default category is 'all'.")] = None,
        filters: Annotated[Optional[StrictStr], Field(description="It's possible to set this parameter to specify a field used for the sort, from & to query parameters. If not specified, the field will default to the category sorting as described above.")] = None,
        offset: Optional[Annotated[int, Field(strict=True, ge=0)]] = None,
        var_from: Annotated[Optional[StrictInt], Field(description="Timestamp that sets the lower limit for the data returned. Data returned will be after this time")] = None,
        to: Annotated[Optional[StrictInt], Field(description="Timestamp that sets the upper limit for the data returned. Data returned will be up to and including this time")] = None,
        sort: Annotated[Optional[StrictStr], Field(description="Sorted by the greatest timestamps")] = None,
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Minimal).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get your faction's organized crimes

        Requires minimal access key with faction API access permissions. <br> It's possible to get older entries either by timestamp range (from, to) or with offset.<br> Crimes are ordered depending on the category chosen:  * For categories 'all' & 'available', the ordering field is 'created_at'.  * For categories 'successful', 'failed' & 'completed', the ordering field is 'executed_at'.  * For categories 'recruiting' & 'expired', the ordering field is 'expired_at'.  * For category 'planning', the ordering field is 'ready_at'.

        :param cat: Category of organized crimes returned. Category 'available' includes both 'recruiting' & 'planning', and category 'completed' includes both 'successful' & 'failure'<br>Default category is 'all'.
        :type cat: str
        :param filters: It's possible to set this parameter to specify a field used for the sort, from & to query parameters. If not specified, the field will default to the category sorting as described above.
        :type filters: str
        :param offset:
        :type offset: int
        :param var_from: Timestamp that sets the lower limit for the data returned. Data returned will be after this time
        :type var_from: int
        :param to: Timestamp that sets the upper limit for the data returned. Data returned will be up to and including this time
        :type to: int
        :param sort: Sorted by the greatest timestamps
        :type sort: str
        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Minimal).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._call_72e5db8a773908fedff4bb002f3f4406_serialize(
            cat=cat,
            filters=filters,
            offset=offset,
            var_from=var_from,
            to=to,
            sort=sort,
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FactionCrimesResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _call_72e5db8a773908fedff4bb002f3f4406_serialize(
        self,
        cat,
        filters,
        offset,
        var_from,
        to,
        sort,
        timestamp,
        comment,
        key,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if cat is not None:
            
            _query_params.append(('cat', cat))
            
        if filters is not None:
            
            _query_params.append(('filters', filters))
            
        if offset is not None:
            
            _query_params.append(('offset', offset))
            
        if var_from is not None:
            
            _query_params.append(('from', var_from))
            
        if to is not None:
            
            _query_params.append(('to', to))
            
        if sort is not None:
            
            _query_params.append(('sort', sort))
            
        if timestamp is not None:
            
            _query_params.append(('timestamp', timestamp))
            
        if comment is not None:
            
            _query_params.append(('comment', comment))
            
        if key is not None:
            
            _query_params.append(('key', key))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'api_key'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/faction/crimes',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def call_76ce672d50a66fc0a832f9088e5436af(
        self,
        id: Annotated[StrictInt, Field(description="Faction id")],
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> FactionTerritoryWarsHistoryResponse:
        """Get a faction's territory wars history

        Requires public access key. <br> 

        :param id: Faction id (required)
        :type id: int
        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._call_76ce672d50a66fc0a832f9088e5436af_serialize(
            id=id,
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FactionTerritoryWarsHistoryResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def call_76ce672d50a66fc0a832f9088e5436af_with_http_info(
        self,
        id: Annotated[StrictInt, Field(description="Faction id")],
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[FactionTerritoryWarsHistoryResponse]:
        """Get a faction's territory wars history

        Requires public access key. <br> 

        :param id: Faction id (required)
        :type id: int
        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._call_76ce672d50a66fc0a832f9088e5436af_serialize(
            id=id,
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FactionTerritoryWarsHistoryResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def call_76ce672d50a66fc0a832f9088e5436af_without_preload_content(
        self,
        id: Annotated[StrictInt, Field(description="Faction id")],
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get a faction's territory wars history

        Requires public access key. <br> 

        :param id: Faction id (required)
        :type id: int
        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._call_76ce672d50a66fc0a832f9088e5436af_serialize(
            id=id,
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FactionTerritoryWarsHistoryResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _call_76ce672d50a66fc0a832f9088e5436af_serialize(
        self,
        id,
        timestamp,
        comment,
        key,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        if timestamp is not None:
            
            _query_params.append(('timestamp', timestamp))
            
        if comment is not None:
            
            _query_params.append(('comment', comment))
            
        if key is not None:
            
            _query_params.append(('key', key))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'api_key'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/faction/{id}/territorywars',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def call_77dae3b930e2e2f9f7608567db0b94f4(
        self,
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Minimal).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> FactionPositionsResponse:
        """Get your faction's positions details

        Requires minimal access key with faction API access permissions. <br>

        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Minimal).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._call_77dae3b930e2e2f9f7608567db0b94f4_serialize(
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FactionPositionsResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def call_77dae3b930e2e2f9f7608567db0b94f4_with_http_info(
        self,
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Minimal).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[FactionPositionsResponse]:
        """Get your faction's positions details

        Requires minimal access key with faction API access permissions. <br>

        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Minimal).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._call_77dae3b930e2e2f9f7608567db0b94f4_serialize(
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FactionPositionsResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def call_77dae3b930e2e2f9f7608567db0b94f4_without_preload_content(
        self,
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Minimal).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get your faction's positions details

        Requires minimal access key with faction API access permissions. <br>

        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Minimal).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._call_77dae3b930e2e2f9f7608567db0b94f4_serialize(
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FactionPositionsResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _call_77dae3b930e2e2f9f7608567db0b94f4_serialize(
        self,
        timestamp,
        comment,
        key,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if timestamp is not None:
            
            _query_params.append(('timestamp', timestamp))
            
        if comment is not None:
            
            _query_params.append(('comment', comment))
            
        if key is not None:
            
            _query_params.append(('key', key))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'api_key'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/faction/positions',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def call_806d9dc7e5fcf9e1ee9c3cdf7f035392(
        self,
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Minimal).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> FactionStatsResponse:
        """Get your faction's challenges stats

        Requires minimal access key with faction API access permissions. <br>

        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Minimal).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._call_806d9dc7e5fcf9e1ee9c3cdf7f035392_serialize(
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FactionStatsResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def call_806d9dc7e5fcf9e1ee9c3cdf7f035392_with_http_info(
        self,
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Minimal).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[FactionStatsResponse]:
        """Get your faction's challenges stats

        Requires minimal access key with faction API access permissions. <br>

        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Minimal).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._call_806d9dc7e5fcf9e1ee9c3cdf7f035392_serialize(
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FactionStatsResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def call_806d9dc7e5fcf9e1ee9c3cdf7f035392_without_preload_content(
        self,
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Minimal).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get your faction's challenges stats

        Requires minimal access key with faction API access permissions. <br>

        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Minimal).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._call_806d9dc7e5fcf9e1ee9c3cdf7f035392_serialize(
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FactionStatsResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _call_806d9dc7e5fcf9e1ee9c3cdf7f035392_serialize(
        self,
        timestamp,
        comment,
        key,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if timestamp is not None:
            
            _query_params.append(('timestamp', timestamp))
            
        if comment is not None:
            
            _query_params.append(('comment', comment))
            
        if key is not None:
            
            _query_params.append(('key', key))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'api_key'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/faction/stats',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def call_8551280aaaf9819aa94be5c469a523de(
        self,
        limit: Optional[Annotated[int, Field(le=1000, strict=True, ge=1)]] = None,
        sort: Annotated[Optional[StrictStr], Field(description="Sorted by the greatest timestamps")] = None,
        to: Annotated[Optional[StrictInt], Field(description="Timestamp that sets the upper limit for the data returned. Data returned will be up to and including this time")] = None,
        var_from: Annotated[Optional[StrictInt], Field(description="Timestamp that sets the lower limit for the data returned. Data returned will be after this time")] = None,
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Limited).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> FactionAttacksFullResponse:
        """Get your faction's simplified attacks

        Requires limited access key with faction API access permissions. <br>

        :param limit:
        :type limit: int
        :param sort: Sorted by the greatest timestamps
        :type sort: str
        :param to: Timestamp that sets the upper limit for the data returned. Data returned will be up to and including this time
        :type to: int
        :param var_from: Timestamp that sets the lower limit for the data returned. Data returned will be after this time
        :type var_from: int
        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Limited).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._call_8551280aaaf9819aa94be5c469a523de_serialize(
            limit=limit,
            sort=sort,
            to=to,
            var_from=var_from,
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FactionAttacksFullResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def call_8551280aaaf9819aa94be5c469a523de_with_http_info(
        self,
        limit: Optional[Annotated[int, Field(le=1000, strict=True, ge=1)]] = None,
        sort: Annotated[Optional[StrictStr], Field(description="Sorted by the greatest timestamps")] = None,
        to: Annotated[Optional[StrictInt], Field(description="Timestamp that sets the upper limit for the data returned. Data returned will be up to and including this time")] = None,
        var_from: Annotated[Optional[StrictInt], Field(description="Timestamp that sets the lower limit for the data returned. Data returned will be after this time")] = None,
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Limited).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[FactionAttacksFullResponse]:
        """Get your faction's simplified attacks

        Requires limited access key with faction API access permissions. <br>

        :param limit:
        :type limit: int
        :param sort: Sorted by the greatest timestamps
        :type sort: str
        :param to: Timestamp that sets the upper limit for the data returned. Data returned will be up to and including this time
        :type to: int
        :param var_from: Timestamp that sets the lower limit for the data returned. Data returned will be after this time
        :type var_from: int
        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Limited).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._call_8551280aaaf9819aa94be5c469a523de_serialize(
            limit=limit,
            sort=sort,
            to=to,
            var_from=var_from,
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FactionAttacksFullResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def call_8551280aaaf9819aa94be5c469a523de_without_preload_content(
        self,
        limit: Optional[Annotated[int, Field(le=1000, strict=True, ge=1)]] = None,
        sort: Annotated[Optional[StrictStr], Field(description="Sorted by the greatest timestamps")] = None,
        to: Annotated[Optional[StrictInt], Field(description="Timestamp that sets the upper limit for the data returned. Data returned will be up to and including this time")] = None,
        var_from: Annotated[Optional[StrictInt], Field(description="Timestamp that sets the lower limit for the data returned. Data returned will be after this time")] = None,
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Limited).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get your faction's simplified attacks

        Requires limited access key with faction API access permissions. <br>

        :param limit:
        :type limit: int
        :param sort: Sorted by the greatest timestamps
        :type sort: str
        :param to: Timestamp that sets the upper limit for the data returned. Data returned will be up to and including this time
        :type to: int
        :param var_from: Timestamp that sets the lower limit for the data returned. Data returned will be after this time
        :type var_from: int
        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Limited).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._call_8551280aaaf9819aa94be5c469a523de_serialize(
            limit=limit,
            sort=sort,
            to=to,
            var_from=var_from,
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FactionAttacksFullResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _call_8551280aaaf9819aa94be5c469a523de_serialize(
        self,
        limit,
        sort,
        to,
        var_from,
        timestamp,
        comment,
        key,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if sort is not None:
            
            _query_params.append(('sort', sort))
            
        if to is not None:
            
            _query_params.append(('to', to))
            
        if var_from is not None:
            
            _query_params.append(('from', var_from))
            
        if timestamp is not None:
            
            _query_params.append(('timestamp', timestamp))
            
        if comment is not None:
            
            _query_params.append(('comment', comment))
            
        if key is not None:
            
            _query_params.append(('key', key))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'api_key'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/faction/attacksfull',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def call_959f415abf48cb753414cec179b1b039(
        self,
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Minimal).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> FactionUpgradesResponse:
        """Get your faction's upgrades

        Requires minimal access key with faction API access permissions. <br>

        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Minimal).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._call_959f415abf48cb753414cec179b1b039_serialize(
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FactionUpgradesResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def call_959f415abf48cb753414cec179b1b039_with_http_info(
        self,
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Minimal).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[FactionUpgradesResponse]:
        """Get your faction's upgrades

        Requires minimal access key with faction API access permissions. <br>

        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Minimal).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._call_959f415abf48cb753414cec179b1b039_serialize(
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FactionUpgradesResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def call_959f415abf48cb753414cec179b1b039_without_preload_content(
        self,
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Minimal).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get your faction's upgrades

        Requires minimal access key with faction API access permissions. <br>

        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Minimal).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._call_959f415abf48cb753414cec179b1b039_serialize(
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FactionUpgradesResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _call_959f415abf48cb753414cec179b1b039_serialize(
        self,
        timestamp,
        comment,
        key,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if timestamp is not None:
            
            _query_params.append(('timestamp', timestamp))
            
        if comment is not None:
            
            _query_params.append(('comment', comment))
            
        if key is not None:
            
            _query_params.append(('key', key))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'api_key'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/faction/upgrades',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def call_99a899c0094645475fd6254b423fea43(
        self,
        id: Annotated[StrictInt, Field(description="Faction id")],
        striptags: Annotated[Optional[StrictStr], Field(description="Determines if fields include HTML or not ('Hospitalized by <a href=...>user</a>' vs 'Hospitalized by user').")] = None,
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> FactionMembersResponse:
        """Get a list of a faction's members

        Requires public access key. <br> The 'revive_setting' value will be populated (not Unknown) if you're requesting data for your own faction and have faction permissions (with custom, limited or full access keys), otherwise it will be set as 'Unknown'.

        :param id: Faction id (required)
        :type id: int
        :param striptags: Determines if fields include HTML or not ('Hospitalized by <a href=...>user</a>' vs 'Hospitalized by user').
        :type striptags: str
        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._call_99a899c0094645475fd6254b423fea43_serialize(
            id=id,
            striptags=striptags,
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FactionMembersResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def call_99a899c0094645475fd6254b423fea43_with_http_info(
        self,
        id: Annotated[StrictInt, Field(description="Faction id")],
        striptags: Annotated[Optional[StrictStr], Field(description="Determines if fields include HTML or not ('Hospitalized by <a href=...>user</a>' vs 'Hospitalized by user').")] = None,
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[FactionMembersResponse]:
        """Get a list of a faction's members

        Requires public access key. <br> The 'revive_setting' value will be populated (not Unknown) if you're requesting data for your own faction and have faction permissions (with custom, limited or full access keys), otherwise it will be set as 'Unknown'.

        :param id: Faction id (required)
        :type id: int
        :param striptags: Determines if fields include HTML or not ('Hospitalized by <a href=...>user</a>' vs 'Hospitalized by user').
        :type striptags: str
        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._call_99a899c0094645475fd6254b423fea43_serialize(
            id=id,
            striptags=striptags,
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FactionMembersResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def call_99a899c0094645475fd6254b423fea43_without_preload_content(
        self,
        id: Annotated[StrictInt, Field(description="Faction id")],
        striptags: Annotated[Optional[StrictStr], Field(description="Determines if fields include HTML or not ('Hospitalized by <a href=...>user</a>' vs 'Hospitalized by user').")] = None,
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get a list of a faction's members

        Requires public access key. <br> The 'revive_setting' value will be populated (not Unknown) if you're requesting data for your own faction and have faction permissions (with custom, limited or full access keys), otherwise it will be set as 'Unknown'.

        :param id: Faction id (required)
        :type id: int
        :param striptags: Determines if fields include HTML or not ('Hospitalized by <a href=...>user</a>' vs 'Hospitalized by user').
        :type striptags: str
        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._call_99a899c0094645475fd6254b423fea43_serialize(
            id=id,
            striptags=striptags,
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FactionMembersResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _call_99a899c0094645475fd6254b423fea43_serialize(
        self,
        id,
        striptags,
        timestamp,
        comment,
        key,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        if striptags is not None:
            
            _query_params.append(('striptags', striptags))
            
        if timestamp is not None:
            
            _query_params.append(('timestamp', timestamp))
            
        if comment is not None:
            
            _query_params.append(('comment', comment))
            
        if key is not None:
            
            _query_params.append(('key', key))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'api_key'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/faction/{id}/members',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def call_9a48477c16e86235efce00a11d56510f(
        self,
        raid_war_id: Annotated[StrictInt, Field(description="Raid war id")],
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> FactionRaidWarReportResponse:
        """Get raid war details

        Requires public access key. <br> 

        :param raid_war_id: Raid war id (required)
        :type raid_war_id: int
        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._call_9a48477c16e86235efce00a11d56510f_serialize(
            raid_war_id=raid_war_id,
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FactionRaidWarReportResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def call_9a48477c16e86235efce00a11d56510f_with_http_info(
        self,
        raid_war_id: Annotated[StrictInt, Field(description="Raid war id")],
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[FactionRaidWarReportResponse]:
        """Get raid war details

        Requires public access key. <br> 

        :param raid_war_id: Raid war id (required)
        :type raid_war_id: int
        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._call_9a48477c16e86235efce00a11d56510f_serialize(
            raid_war_id=raid_war_id,
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FactionRaidWarReportResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def call_9a48477c16e86235efce00a11d56510f_without_preload_content(
        self,
        raid_war_id: Annotated[StrictInt, Field(description="Raid war id")],
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get raid war details

        Requires public access key. <br> 

        :param raid_war_id: Raid war id (required)
        :type raid_war_id: int
        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._call_9a48477c16e86235efce00a11d56510f_serialize(
            raid_war_id=raid_war_id,
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FactionRaidWarReportResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _call_9a48477c16e86235efce00a11d56510f_serialize(
        self,
        raid_war_id,
        timestamp,
        comment,
        key,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if raid_war_id is not None:
            _path_params['raidWarId'] = raid_war_id
        # process the query parameters
        if timestamp is not None:
            
            _query_params.append(('timestamp', timestamp))
            
        if comment is not None:
            
            _query_params.append(('comment', comment))
            
        if key is not None:
            
            _query_params.append(('key', key))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'api_key'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/faction/{raidWarId}/raidreport',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def call_9f7dccb023d81a8da7f5f6a359658a64(
        self,
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Minimal).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> FactionApplicationsResponse:
        """Get your faction's applications

        Requires minimal access key with faction API access permissions. <br>

        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Minimal).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._call_9f7dccb023d81a8da7f5f6a359658a64_serialize(
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FactionApplicationsResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def call_9f7dccb023d81a8da7f5f6a359658a64_with_http_info(
        self,
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Minimal).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[FactionApplicationsResponse]:
        """Get your faction's applications

        Requires minimal access key with faction API access permissions. <br>

        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Minimal).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._call_9f7dccb023d81a8da7f5f6a359658a64_serialize(
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FactionApplicationsResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def call_9f7dccb023d81a8da7f5f6a359658a64_without_preload_content(
        self,
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Minimal).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get your faction's applications

        Requires minimal access key with faction API access permissions. <br>

        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Minimal).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._call_9f7dccb023d81a8da7f5f6a359658a64_serialize(
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FactionApplicationsResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _call_9f7dccb023d81a8da7f5f6a359658a64_serialize(
        self,
        timestamp,
        comment,
        key,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if timestamp is not None:
            
            _query_params.append(('timestamp', timestamp))
            
        if comment is not None:
            
            _query_params.append(('comment', comment))
            
        if key is not None:
            
            _query_params.append(('key', key))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'api_key'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/faction/applications',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def cb5b38ba64c389e706526df8bc8af9b6(
        self,
        limit: Optional[Annotated[int, Field(le=100, strict=True, ge=1)]] = None,
        sort: Annotated[Optional[StrictStr], Field(description="Sorted by the greatest timestamps")] = None,
        to: Annotated[Optional[StrictInt], Field(description="Timestamp that sets the upper limit for the data returned. Data returned will be up to and including this time")] = None,
        var_from: Annotated[Optional[StrictInt], Field(description="Timestamp that sets the lower limit for the data returned. Data returned will be after this time")] = None,
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Limited).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> FactionAttacksResponse:
        """Get your faction's detailed attacks

        Requires limited access key with faction API access permissions. <br>

        :param limit:
        :type limit: int
        :param sort: Sorted by the greatest timestamps
        :type sort: str
        :param to: Timestamp that sets the upper limit for the data returned. Data returned will be up to and including this time
        :type to: int
        :param var_from: Timestamp that sets the lower limit for the data returned. Data returned will be after this time
        :type var_from: int
        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Limited).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._cb5b38ba64c389e706526df8bc8af9b6_serialize(
            limit=limit,
            sort=sort,
            to=to,
            var_from=var_from,
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FactionAttacksResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def cb5b38ba64c389e706526df8bc8af9b6_with_http_info(
        self,
        limit: Optional[Annotated[int, Field(le=100, strict=True, ge=1)]] = None,
        sort: Annotated[Optional[StrictStr], Field(description="Sorted by the greatest timestamps")] = None,
        to: Annotated[Optional[StrictInt], Field(description="Timestamp that sets the upper limit for the data returned. Data returned will be up to and including this time")] = None,
        var_from: Annotated[Optional[StrictInt], Field(description="Timestamp that sets the lower limit for the data returned. Data returned will be after this time")] = None,
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Limited).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[FactionAttacksResponse]:
        """Get your faction's detailed attacks

        Requires limited access key with faction API access permissions. <br>

        :param limit:
        :type limit: int
        :param sort: Sorted by the greatest timestamps
        :type sort: str
        :param to: Timestamp that sets the upper limit for the data returned. Data returned will be up to and including this time
        :type to: int
        :param var_from: Timestamp that sets the lower limit for the data returned. Data returned will be after this time
        :type var_from: int
        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Limited).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._cb5b38ba64c389e706526df8bc8af9b6_serialize(
            limit=limit,
            sort=sort,
            to=to,
            var_from=var_from,
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FactionAttacksResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def cb5b38ba64c389e706526df8bc8af9b6_without_preload_content(
        self,
        limit: Optional[Annotated[int, Field(le=100, strict=True, ge=1)]] = None,
        sort: Annotated[Optional[StrictStr], Field(description="Sorted by the greatest timestamps")] = None,
        to: Annotated[Optional[StrictInt], Field(description="Timestamp that sets the upper limit for the data returned. Data returned will be up to and including this time")] = None,
        var_from: Annotated[Optional[StrictInt], Field(description="Timestamp that sets the lower limit for the data returned. Data returned will be after this time")] = None,
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Limited).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get your faction's detailed attacks

        Requires limited access key with faction API access permissions. <br>

        :param limit:
        :type limit: int
        :param sort: Sorted by the greatest timestamps
        :type sort: str
        :param to: Timestamp that sets the upper limit for the data returned. Data returned will be up to and including this time
        :type to: int
        :param var_from: Timestamp that sets the lower limit for the data returned. Data returned will be after this time
        :type var_from: int
        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Limited).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._cb5b38ba64c389e706526df8bc8af9b6_serialize(
            limit=limit,
            sort=sort,
            to=to,
            var_from=var_from,
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FactionAttacksResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _cb5b38ba64c389e706526df8bc8af9b6_serialize(
        self,
        limit,
        sort,
        to,
        var_from,
        timestamp,
        comment,
        key,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if sort is not None:
            
            _query_params.append(('sort', sort))
            
        if to is not None:
            
            _query_params.append(('to', to))
            
        if var_from is not None:
            
            _query_params.append(('from', var_from))
            
        if timestamp is not None:
            
            _query_params.append(('timestamp', timestamp))
            
        if comment is not None:
            
            _query_params.append(('comment', comment))
            
        if key is not None:
            
            _query_params.append(('key', key))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'api_key'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/faction/attacks',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def db49842d88e193777dc695e54769113e(
        self,
        ranked_war_id: Annotated[StrictInt, Field(description="Ranked war id")],
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> FactionRankedWarReportResponse:
        """Get ranked war details

        Requires public access key. <br> 

        :param ranked_war_id: Ranked war id (required)
        :type ranked_war_id: int
        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._db49842d88e193777dc695e54769113e_serialize(
            ranked_war_id=ranked_war_id,
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FactionRankedWarReportResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def db49842d88e193777dc695e54769113e_with_http_info(
        self,
        ranked_war_id: Annotated[StrictInt, Field(description="Ranked war id")],
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[FactionRankedWarReportResponse]:
        """Get ranked war details

        Requires public access key. <br> 

        :param ranked_war_id: Ranked war id (required)
        :type ranked_war_id: int
        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._db49842d88e193777dc695e54769113e_serialize(
            ranked_war_id=ranked_war_id,
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FactionRankedWarReportResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def db49842d88e193777dc695e54769113e_without_preload_content(
        self,
        ranked_war_id: Annotated[StrictInt, Field(description="Ranked war id")],
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get ranked war details

        Requires public access key. <br> 

        :param ranked_war_id: Ranked war id (required)
        :type ranked_war_id: int
        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._db49842d88e193777dc695e54769113e_serialize(
            ranked_war_id=ranked_war_id,
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FactionRankedWarReportResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _db49842d88e193777dc695e54769113e_serialize(
        self,
        ranked_war_id,
        timestamp,
        comment,
        key,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if ranked_war_id is not None:
            _path_params['rankedWarId'] = ranked_war_id
        # process the query parameters
        if timestamp is not None:
            
            _query_params.append(('timestamp', timestamp))
            
        if comment is not None:
            
            _query_params.append(('comment', comment))
            
        if key is not None:
            
            _query_params.append(('key', key))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'api_key'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/faction/{rankedWarId}/rankedwarreport',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def dd88ca1ffafed80457916da5298a3422(
        self,
        id: Annotated[StrictInt, Field(description="Faction id")],
        limit: Optional[Annotated[int, Field(le=100, strict=True, ge=1)]] = None,
        sort: Annotated[Optional[StrictStr], Field(description="Sorted by the greatest timestamps")] = None,
        to: Annotated[Optional[StrictInt], Field(description="Timestamp that sets the upper limit for the data returned. Data returned will be up to and including this time")] = None,
        var_from: Annotated[Optional[StrictInt], Field(description="Timestamp that sets the lower limit for the data returned. Data returned will be after this time")] = None,
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> FactionChainsResponse:
        """Get a list of a faction's completed chains

        Requires public access key. <br>

        :param id: Faction id (required)
        :type id: int
        :param limit:
        :type limit: int
        :param sort: Sorted by the greatest timestamps
        :type sort: str
        :param to: Timestamp that sets the upper limit for the data returned. Data returned will be up to and including this time
        :type to: int
        :param var_from: Timestamp that sets the lower limit for the data returned. Data returned will be after this time
        :type var_from: int
        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._dd88ca1ffafed80457916da5298a3422_serialize(
            id=id,
            limit=limit,
            sort=sort,
            to=to,
            var_from=var_from,
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FactionChainsResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def dd88ca1ffafed80457916da5298a3422_with_http_info(
        self,
        id: Annotated[StrictInt, Field(description="Faction id")],
        limit: Optional[Annotated[int, Field(le=100, strict=True, ge=1)]] = None,
        sort: Annotated[Optional[StrictStr], Field(description="Sorted by the greatest timestamps")] = None,
        to: Annotated[Optional[StrictInt], Field(description="Timestamp that sets the upper limit for the data returned. Data returned will be up to and including this time")] = None,
        var_from: Annotated[Optional[StrictInt], Field(description="Timestamp that sets the lower limit for the data returned. Data returned will be after this time")] = None,
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[FactionChainsResponse]:
        """Get a list of a faction's completed chains

        Requires public access key. <br>

        :param id: Faction id (required)
        :type id: int
        :param limit:
        :type limit: int
        :param sort: Sorted by the greatest timestamps
        :type sort: str
        :param to: Timestamp that sets the upper limit for the data returned. Data returned will be up to and including this time
        :type to: int
        :param var_from: Timestamp that sets the lower limit for the data returned. Data returned will be after this time
        :type var_from: int
        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._dd88ca1ffafed80457916da5298a3422_serialize(
            id=id,
            limit=limit,
            sort=sort,
            to=to,
            var_from=var_from,
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FactionChainsResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def dd88ca1ffafed80457916da5298a3422_without_preload_content(
        self,
        id: Annotated[StrictInt, Field(description="Faction id")],
        limit: Optional[Annotated[int, Field(le=100, strict=True, ge=1)]] = None,
        sort: Annotated[Optional[StrictStr], Field(description="Sorted by the greatest timestamps")] = None,
        to: Annotated[Optional[StrictInt], Field(description="Timestamp that sets the upper limit for the data returned. Data returned will be up to and including this time")] = None,
        var_from: Annotated[Optional[StrictInt], Field(description="Timestamp that sets the lower limit for the data returned. Data returned will be after this time")] = None,
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get a list of a faction's completed chains

        Requires public access key. <br>

        :param id: Faction id (required)
        :type id: int
        :param limit:
        :type limit: int
        :param sort: Sorted by the greatest timestamps
        :type sort: str
        :param to: Timestamp that sets the upper limit for the data returned. Data returned will be up to and including this time
        :type to: int
        :param var_from: Timestamp that sets the lower limit for the data returned. Data returned will be after this time
        :type var_from: int
        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._dd88ca1ffafed80457916da5298a3422_serialize(
            id=id,
            limit=limit,
            sort=sort,
            to=to,
            var_from=var_from,
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FactionChainsResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _dd88ca1ffafed80457916da5298a3422_serialize(
        self,
        id,
        limit,
        sort,
        to,
        var_from,
        timestamp,
        comment,
        key,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if sort is not None:
            
            _query_params.append(('sort', sort))
            
        if to is not None:
            
            _query_params.append(('to', to))
            
        if var_from is not None:
            
            _query_params.append(('from', var_from))
            
        if timestamp is not None:
            
            _query_params.append(('timestamp', timestamp))
            
        if comment is not None:
            
            _query_params.append(('comment', comment))
            
        if key is not None:
            
            _query_params.append(('key', key))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'api_key'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/faction/{id}/chains',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def dd89e28b1f1ed88853b09ecc982e4e66(
        self,
        selections: Annotated[Optional[List[FactionSelectionName]], Field(description="Selection names")] = None,
        id: Annotated[Optional[Any], Field(description="selection id")] = None,
        limit: Optional[Annotated[int, Field(strict=True, ge=1)]] = None,
        var_from: Annotated[Optional[StrictInt], Field(description="Timestamp that sets the lower limit for the data returned. Data returned will be after this time")] = None,
        to: Annotated[Optional[StrictInt], Field(description="Timestamp that sets the upper limit for the data returned. Data returned will be up to and including this time")] = None,
        cat: Annotated[Optional[Any], Field(description="Selection category")] = None,
        stat: Annotated[Optional[FactionStatEnum], Field(description="Stat category")] = None,
        filters: Optional[StrictStr] = None,
        striptags: Annotated[Optional[StrictStr], Field(description="Determines if fields include HTML or not ('Hospitalized by <a href=...>user</a>' vs 'Hospitalized by user').")] = None,
        sort: Annotated[Optional[StrictStr], Field(description="Sorted by the greatest timestamps")] = None,
        offset: Optional[Annotated[int, Field(strict=True, ge=0)]] = None,
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> Dd89e28b1f1ed88853b09ecc982e4e66200Response:
        """Get any Faction selection

        Key access level depends on the required selections. <br> Choose one or more selections (comma separated).

        :param selections: Selection names
        :type selections: List[FactionSelectionName]
        :param id: selection id
        :type id: Dd89e28b1f1ed88853b09ecc982e4e66IdParameter
        :param limit:
        :type limit: int
        :param var_from: Timestamp that sets the lower limit for the data returned. Data returned will be after this time
        :type var_from: int
        :param to: Timestamp that sets the upper limit for the data returned. Data returned will be up to and including this time
        :type to: int
        :param cat: Selection category
        :type cat: Dd89e28b1f1ed88853b09ecc982e4e66CatParameter
        :param stat: Stat category
        :type stat: FactionStatEnum
        :param filters:
        :type filters: str
        :param striptags: Determines if fields include HTML or not ('Hospitalized by <a href=...>user</a>' vs 'Hospitalized by user').
        :type striptags: str
        :param sort: Sorted by the greatest timestamps
        :type sort: str
        :param offset:
        :type offset: int
        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._dd89e28b1f1ed88853b09ecc982e4e66_serialize(
            selections=selections,
            id=id,
            limit=limit,
            var_from=var_from,
            to=to,
            cat=cat,
            stat=stat,
            filters=filters,
            striptags=striptags,
            sort=sort,
            offset=offset,
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Dd89e28b1f1ed88853b09ecc982e4e66200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def dd89e28b1f1ed88853b09ecc982e4e66_with_http_info(
        self,
        selections: Annotated[Optional[List[FactionSelectionName]], Field(description="Selection names")] = None,
        id: Annotated[Optional[Any], Field(description="selection id")] = None,
        limit: Optional[Annotated[int, Field(strict=True, ge=1)]] = None,
        var_from: Annotated[Optional[StrictInt], Field(description="Timestamp that sets the lower limit for the data returned. Data returned will be after this time")] = None,
        to: Annotated[Optional[StrictInt], Field(description="Timestamp that sets the upper limit for the data returned. Data returned will be up to and including this time")] = None,
        cat: Annotated[Optional[Any], Field(description="Selection category")] = None,
        stat: Annotated[Optional[FactionStatEnum], Field(description="Stat category")] = None,
        filters: Optional[StrictStr] = None,
        striptags: Annotated[Optional[StrictStr], Field(description="Determines if fields include HTML or not ('Hospitalized by <a href=...>user</a>' vs 'Hospitalized by user').")] = None,
        sort: Annotated[Optional[StrictStr], Field(description="Sorted by the greatest timestamps")] = None,
        offset: Optional[Annotated[int, Field(strict=True, ge=0)]] = None,
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[Dd89e28b1f1ed88853b09ecc982e4e66200Response]:
        """Get any Faction selection

        Key access level depends on the required selections. <br> Choose one or more selections (comma separated).

        :param selections: Selection names
        :type selections: List[FactionSelectionName]
        :param id: selection id
        :type id: Dd89e28b1f1ed88853b09ecc982e4e66IdParameter
        :param limit:
        :type limit: int
        :param var_from: Timestamp that sets the lower limit for the data returned. Data returned will be after this time
        :type var_from: int
        :param to: Timestamp that sets the upper limit for the data returned. Data returned will be up to and including this time
        :type to: int
        :param cat: Selection category
        :type cat: Dd89e28b1f1ed88853b09ecc982e4e66CatParameter
        :param stat: Stat category
        :type stat: FactionStatEnum
        :param filters:
        :type filters: str
        :param striptags: Determines if fields include HTML or not ('Hospitalized by <a href=...>user</a>' vs 'Hospitalized by user').
        :type striptags: str
        :param sort: Sorted by the greatest timestamps
        :type sort: str
        :param offset:
        :type offset: int
        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._dd89e28b1f1ed88853b09ecc982e4e66_serialize(
            selections=selections,
            id=id,
            limit=limit,
            var_from=var_from,
            to=to,
            cat=cat,
            stat=stat,
            filters=filters,
            striptags=striptags,
            sort=sort,
            offset=offset,
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Dd89e28b1f1ed88853b09ecc982e4e66200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def dd89e28b1f1ed88853b09ecc982e4e66_without_preload_content(
        self,
        selections: Annotated[Optional[List[FactionSelectionName]], Field(description="Selection names")] = None,
        id: Annotated[Optional[Any], Field(description="selection id")] = None,
        limit: Optional[Annotated[int, Field(strict=True, ge=1)]] = None,
        var_from: Annotated[Optional[StrictInt], Field(description="Timestamp that sets the lower limit for the data returned. Data returned will be after this time")] = None,
        to: Annotated[Optional[StrictInt], Field(description="Timestamp that sets the upper limit for the data returned. Data returned will be up to and including this time")] = None,
        cat: Annotated[Optional[Any], Field(description="Selection category")] = None,
        stat: Annotated[Optional[FactionStatEnum], Field(description="Stat category")] = None,
        filters: Optional[StrictStr] = None,
        striptags: Annotated[Optional[StrictStr], Field(description="Determines if fields include HTML or not ('Hospitalized by <a href=...>user</a>' vs 'Hospitalized by user').")] = None,
        sort: Annotated[Optional[StrictStr], Field(description="Sorted by the greatest timestamps")] = None,
        offset: Optional[Annotated[int, Field(strict=True, ge=0)]] = None,
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get any Faction selection

        Key access level depends on the required selections. <br> Choose one or more selections (comma separated).

        :param selections: Selection names
        :type selections: List[FactionSelectionName]
        :param id: selection id
        :type id: Dd89e28b1f1ed88853b09ecc982e4e66IdParameter
        :param limit:
        :type limit: int
        :param var_from: Timestamp that sets the lower limit for the data returned. Data returned will be after this time
        :type var_from: int
        :param to: Timestamp that sets the upper limit for the data returned. Data returned will be up to and including this time
        :type to: int
        :param cat: Selection category
        :type cat: Dd89e28b1f1ed88853b09ecc982e4e66CatParameter
        :param stat: Stat category
        :type stat: FactionStatEnum
        :param filters:
        :type filters: str
        :param striptags: Determines if fields include HTML or not ('Hospitalized by <a href=...>user</a>' vs 'Hospitalized by user').
        :type striptags: str
        :param sort: Sorted by the greatest timestamps
        :type sort: str
        :param offset:
        :type offset: int
        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._dd89e28b1f1ed88853b09ecc982e4e66_serialize(
            selections=selections,
            id=id,
            limit=limit,
            var_from=var_from,
            to=to,
            cat=cat,
            stat=stat,
            filters=filters,
            striptags=striptags,
            sort=sort,
            offset=offset,
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Dd89e28b1f1ed88853b09ecc982e4e66200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _dd89e28b1f1ed88853b09ecc982e4e66_serialize(
        self,
        selections,
        id,
        limit,
        var_from,
        to,
        cat,
        stat,
        filters,
        striptags,
        sort,
        offset,
        timestamp,
        comment,
        key,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'selections': 'csv',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if selections is not None:
            
            _query_params.append(('selections', selections))
            
        if id is not None:
            
            _query_params.append(('id', id))
            
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if var_from is not None:
            
            _query_params.append(('from', var_from))
            
        if to is not None:
            
            _query_params.append(('to', to))
            
        if cat is not None:
            
            _query_params.append(('cat', cat))
            
        if stat is not None:
            
            _query_params.append(('stat', stat.value))
            
        if filters is not None:
            
            _query_params.append(('filters', filters))
            
        if striptags is not None:
            
            _query_params.append(('striptags', striptags))
            
        if sort is not None:
            
            _query_params.append(('sort', sort))
            
        if offset is not None:
            
            _query_params.append(('offset', offset))
            
        if timestamp is not None:
            
            _query_params.append(('timestamp', timestamp))
            
        if comment is not None:
            
            _query_params.append(('comment', comment))
            
        if key is not None:
            
            _query_params.append(('key', key))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'api_key'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/faction',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def dfc0adb55af4aeeeebc2d82309c71eea(
        self,
        limit: Optional[Annotated[int, Field(le=100, strict=True, ge=1)]] = None,
        sort: Annotated[Optional[StrictStr], Field(description="Sorted by the greatest timestamps")] = None,
        to: Annotated[Optional[StrictInt], Field(description="Timestamp that sets the upper limit for the data returned. Data returned will be up to and including this time")] = None,
        var_from: Annotated[Optional[StrictInt], Field(description="Timestamp that sets the lower limit for the data returned. Data returned will be after this time")] = None,
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> FactionChainsResponse:
        """Get a list of your faction's completed chains

        Requires public access key. <br>

        :param limit:
        :type limit: int
        :param sort: Sorted by the greatest timestamps
        :type sort: str
        :param to: Timestamp that sets the upper limit for the data returned. Data returned will be up to and including this time
        :type to: int
        :param var_from: Timestamp that sets the lower limit for the data returned. Data returned will be after this time
        :type var_from: int
        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._dfc0adb55af4aeeeebc2d82309c71eea_serialize(
            limit=limit,
            sort=sort,
            to=to,
            var_from=var_from,
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FactionChainsResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def dfc0adb55af4aeeeebc2d82309c71eea_with_http_info(
        self,
        limit: Optional[Annotated[int, Field(le=100, strict=True, ge=1)]] = None,
        sort: Annotated[Optional[StrictStr], Field(description="Sorted by the greatest timestamps")] = None,
        to: Annotated[Optional[StrictInt], Field(description="Timestamp that sets the upper limit for the data returned. Data returned will be up to and including this time")] = None,
        var_from: Annotated[Optional[StrictInt], Field(description="Timestamp that sets the lower limit for the data returned. Data returned will be after this time")] = None,
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[FactionChainsResponse]:
        """Get a list of your faction's completed chains

        Requires public access key. <br>

        :param limit:
        :type limit: int
        :param sort: Sorted by the greatest timestamps
        :type sort: str
        :param to: Timestamp that sets the upper limit for the data returned. Data returned will be up to and including this time
        :type to: int
        :param var_from: Timestamp that sets the lower limit for the data returned. Data returned will be after this time
        :type var_from: int
        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._dfc0adb55af4aeeeebc2d82309c71eea_serialize(
            limit=limit,
            sort=sort,
            to=to,
            var_from=var_from,
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FactionChainsResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def dfc0adb55af4aeeeebc2d82309c71eea_without_preload_content(
        self,
        limit: Optional[Annotated[int, Field(le=100, strict=True, ge=1)]] = None,
        sort: Annotated[Optional[StrictStr], Field(description="Sorted by the greatest timestamps")] = None,
        to: Annotated[Optional[StrictInt], Field(description="Timestamp that sets the upper limit for the data returned. Data returned will be up to and including this time")] = None,
        var_from: Annotated[Optional[StrictInt], Field(description="Timestamp that sets the lower limit for the data returned. Data returned will be after this time")] = None,
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get a list of your faction's completed chains

        Requires public access key. <br>

        :param limit:
        :type limit: int
        :param sort: Sorted by the greatest timestamps
        :type sort: str
        :param to: Timestamp that sets the upper limit for the data returned. Data returned will be up to and including this time
        :type to: int
        :param var_from: Timestamp that sets the lower limit for the data returned. Data returned will be after this time
        :type var_from: int
        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._dfc0adb55af4aeeeebc2d82309c71eea_serialize(
            limit=limit,
            sort=sort,
            to=to,
            var_from=var_from,
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FactionChainsResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _dfc0adb55af4aeeeebc2d82309c71eea_serialize(
        self,
        limit,
        sort,
        to,
        var_from,
        timestamp,
        comment,
        key,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if sort is not None:
            
            _query_params.append(('sort', sort))
            
        if to is not None:
            
            _query_params.append(('to', to))
            
        if var_from is not None:
            
            _query_params.append(('from', var_from))
            
        if timestamp is not None:
            
            _query_params.append(('timestamp', timestamp))
            
        if comment is not None:
            
            _query_params.append(('comment', comment))
            
        if key is not None:
            
            _query_params.append(('key', key))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'api_key'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/faction/chains',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def e104b0b606664d06d9638111702301f3(
        self,
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> FactionHofResponse:
        """Get your faction's hall of fame rankings.

        Requires public access key. <br> 

        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._e104b0b606664d06d9638111702301f3_serialize(
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FactionHofResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def e104b0b606664d06d9638111702301f3_with_http_info(
        self,
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[FactionHofResponse]:
        """Get your faction's hall of fame rankings.

        Requires public access key. <br> 

        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._e104b0b606664d06d9638111702301f3_serialize(
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FactionHofResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def e104b0b606664d06d9638111702301f3_without_preload_content(
        self,
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get your faction's hall of fame rankings.

        Requires public access key. <br> 

        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._e104b0b606664d06d9638111702301f3_serialize(
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FactionHofResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _e104b0b606664d06d9638111702301f3_serialize(
        self,
        timestamp,
        comment,
        key,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if timestamp is not None:
            
            _query_params.append(('timestamp', timestamp))
            
        if comment is not None:
            
            _query_params.append(('comment', comment))
            
        if key is not None:
            
            _query_params.append(('key', key))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'api_key'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/faction/hof',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def e8bd37f10cc5e0e8d6694bb306f3a1e4(
        self,
        cat: Annotated[Optional[ReportTypeEnum], Field(description="Used to filter reports with a specific type.")] = None,
        target: Annotated[Optional[StrictInt], Field(description="Get reports for a specific player by passing their player ID.")] = None,
        limit: Optional[Annotated[int, Field(le=100, strict=True, ge=1)]] = None,
        offset: Optional[Annotated[int, Field(strict=True, ge=0)]] = None,
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Limited).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ReportsResponse:
        """Get faction reports

        Requires limited access key. <br>  *  The default limit is set to 25. However, the limit can be set to 100 for the 'stats' category.

        :param cat: Used to filter reports with a specific type.
        :type cat: ReportTypeEnum
        :param target: Get reports for a specific player by passing their player ID.
        :type target: int
        :param limit:
        :type limit: int
        :param offset:
        :type offset: int
        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Limited).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._e8bd37f10cc5e0e8d6694bb306f3a1e4_serialize(
            cat=cat,
            target=target,
            limit=limit,
            offset=offset,
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ReportsResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def e8bd37f10cc5e0e8d6694bb306f3a1e4_with_http_info(
        self,
        cat: Annotated[Optional[ReportTypeEnum], Field(description="Used to filter reports with a specific type.")] = None,
        target: Annotated[Optional[StrictInt], Field(description="Get reports for a specific player by passing their player ID.")] = None,
        limit: Optional[Annotated[int, Field(le=100, strict=True, ge=1)]] = None,
        offset: Optional[Annotated[int, Field(strict=True, ge=0)]] = None,
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Limited).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ReportsResponse]:
        """Get faction reports

        Requires limited access key. <br>  *  The default limit is set to 25. However, the limit can be set to 100 for the 'stats' category.

        :param cat: Used to filter reports with a specific type.
        :type cat: ReportTypeEnum
        :param target: Get reports for a specific player by passing their player ID.
        :type target: int
        :param limit:
        :type limit: int
        :param offset:
        :type offset: int
        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Limited).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._e8bd37f10cc5e0e8d6694bb306f3a1e4_serialize(
            cat=cat,
            target=target,
            limit=limit,
            offset=offset,
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ReportsResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def e8bd37f10cc5e0e8d6694bb306f3a1e4_without_preload_content(
        self,
        cat: Annotated[Optional[ReportTypeEnum], Field(description="Used to filter reports with a specific type.")] = None,
        target: Annotated[Optional[StrictInt], Field(description="Get reports for a specific player by passing their player ID.")] = None,
        limit: Optional[Annotated[int, Field(le=100, strict=True, ge=1)]] = None,
        offset: Optional[Annotated[int, Field(strict=True, ge=0)]] = None,
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Limited).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get faction reports

        Requires limited access key. <br>  *  The default limit is set to 25. However, the limit can be set to 100 for the 'stats' category.

        :param cat: Used to filter reports with a specific type.
        :type cat: ReportTypeEnum
        :param target: Get reports for a specific player by passing their player ID.
        :type target: int
        :param limit:
        :type limit: int
        :param offset:
        :type offset: int
        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Limited).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._e8bd37f10cc5e0e8d6694bb306f3a1e4_serialize(
            cat=cat,
            target=target,
            limit=limit,
            offset=offset,
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ReportsResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _e8bd37f10cc5e0e8d6694bb306f3a1e4_serialize(
        self,
        cat,
        target,
        limit,
        offset,
        timestamp,
        comment,
        key,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if cat is not None:
            
            _query_params.append(('cat', cat.value))
            
        if target is not None:
            
            _query_params.append(('target', target))
            
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if offset is not None:
            
            _query_params.append(('offset', offset))
            
        if timestamp is not None:
            
            _query_params.append(('timestamp', timestamp))
            
        if comment is not None:
            
            _query_params.append(('comment', comment))
            
        if key is not None:
            
            _query_params.append(('key', key))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'api_key'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/faction/reports',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def ec8f82e15a321adbb20e615024d9dff6(
        self,
        id: Annotated[StrictInt, Field(description="Faction id")],
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> FactionOngoingChainResponse:
        """Get a faction's current chain

        Requires public access key. <br>

        :param id: Faction id (required)
        :type id: int
        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._ec8f82e15a321adbb20e615024d9dff6_serialize(
            id=id,
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FactionOngoingChainResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def ec8f82e15a321adbb20e615024d9dff6_with_http_info(
        self,
        id: Annotated[StrictInt, Field(description="Faction id")],
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[FactionOngoingChainResponse]:
        """Get a faction's current chain

        Requires public access key. <br>

        :param id: Faction id (required)
        :type id: int
        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._ec8f82e15a321adbb20e615024d9dff6_serialize(
            id=id,
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FactionOngoingChainResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def ec8f82e15a321adbb20e615024d9dff6_without_preload_content(
        self,
        id: Annotated[StrictInt, Field(description="Faction id")],
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get a faction's current chain

        Requires public access key. <br>

        :param id: Faction id (required)
        :type id: int
        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._ec8f82e15a321adbb20e615024d9dff6_serialize(
            id=id,
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FactionOngoingChainResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _ec8f82e15a321adbb20e615024d9dff6_serialize(
        self,
        id,
        timestamp,
        comment,
        key,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        if timestamp is not None:
            
            _query_params.append(('timestamp', timestamp))
            
        if comment is not None:
            
            _query_params.append(('comment', comment))
            
        if key is not None:
            
            _query_params.append(('key', key))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'api_key'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/faction/{id}/chain',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def f17a4064779e8de5200238816c233c02(
        self,
        limit: Optional[Annotated[int, Field(le=1000, strict=True, ge=1)]] = None,
        sort: Annotated[Optional[StrictStr], Field(description="Sorted by the greatest timestamps")] = None,
        to: Annotated[Optional[StrictInt], Field(description="Timestamp that sets the upper limit for the data returned. Data returned will be up to and including this time")] = None,
        var_from: Annotated[Optional[StrictInt], Field(description="Timestamp that sets the lower limit for the data returned. Data returned will be after this time")] = None,
        striptags: Annotated[Optional[StrictStr], Field(description="Determines if fields include HTML or not ('Hospitalized by <a href=...>user</a>' vs 'Hospitalized by user').")] = None,
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Limited).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RevivesFullResponse:
        """Get your faction's simplified revives

        Requires limited access key with faction API access permissions. <br>

        :param limit:
        :type limit: int
        :param sort: Sorted by the greatest timestamps
        :type sort: str
        :param to: Timestamp that sets the upper limit for the data returned. Data returned will be up to and including this time
        :type to: int
        :param var_from: Timestamp that sets the lower limit for the data returned. Data returned will be after this time
        :type var_from: int
        :param striptags: Determines if fields include HTML or not ('Hospitalized by <a href=...>user</a>' vs 'Hospitalized by user').
        :type striptags: str
        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Limited).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._f17a4064779e8de5200238816c233c02_serialize(
            limit=limit,
            sort=sort,
            to=to,
            var_from=var_from,
            striptags=striptags,
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "RevivesFullResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def f17a4064779e8de5200238816c233c02_with_http_info(
        self,
        limit: Optional[Annotated[int, Field(le=1000, strict=True, ge=1)]] = None,
        sort: Annotated[Optional[StrictStr], Field(description="Sorted by the greatest timestamps")] = None,
        to: Annotated[Optional[StrictInt], Field(description="Timestamp that sets the upper limit for the data returned. Data returned will be up to and including this time")] = None,
        var_from: Annotated[Optional[StrictInt], Field(description="Timestamp that sets the lower limit for the data returned. Data returned will be after this time")] = None,
        striptags: Annotated[Optional[StrictStr], Field(description="Determines if fields include HTML or not ('Hospitalized by <a href=...>user</a>' vs 'Hospitalized by user').")] = None,
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Limited).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[RevivesFullResponse]:
        """Get your faction's simplified revives

        Requires limited access key with faction API access permissions. <br>

        :param limit:
        :type limit: int
        :param sort: Sorted by the greatest timestamps
        :type sort: str
        :param to: Timestamp that sets the upper limit for the data returned. Data returned will be up to and including this time
        :type to: int
        :param var_from: Timestamp that sets the lower limit for the data returned. Data returned will be after this time
        :type var_from: int
        :param striptags: Determines if fields include HTML or not ('Hospitalized by <a href=...>user</a>' vs 'Hospitalized by user').
        :type striptags: str
        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Limited).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._f17a4064779e8de5200238816c233c02_serialize(
            limit=limit,
            sort=sort,
            to=to,
            var_from=var_from,
            striptags=striptags,
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "RevivesFullResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def f17a4064779e8de5200238816c233c02_without_preload_content(
        self,
        limit: Optional[Annotated[int, Field(le=1000, strict=True, ge=1)]] = None,
        sort: Annotated[Optional[StrictStr], Field(description="Sorted by the greatest timestamps")] = None,
        to: Annotated[Optional[StrictInt], Field(description="Timestamp that sets the upper limit for the data returned. Data returned will be up to and including this time")] = None,
        var_from: Annotated[Optional[StrictInt], Field(description="Timestamp that sets the lower limit for the data returned. Data returned will be after this time")] = None,
        striptags: Annotated[Optional[StrictStr], Field(description="Determines if fields include HTML or not ('Hospitalized by <a href=...>user</a>' vs 'Hospitalized by user').")] = None,
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Limited).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get your faction's simplified revives

        Requires limited access key with faction API access permissions. <br>

        :param limit:
        :type limit: int
        :param sort: Sorted by the greatest timestamps
        :type sort: str
        :param to: Timestamp that sets the upper limit for the data returned. Data returned will be up to and including this time
        :type to: int
        :param var_from: Timestamp that sets the lower limit for the data returned. Data returned will be after this time
        :type var_from: int
        :param striptags: Determines if fields include HTML or not ('Hospitalized by <a href=...>user</a>' vs 'Hospitalized by user').
        :type striptags: str
        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Limited).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._f17a4064779e8de5200238816c233c02_serialize(
            limit=limit,
            sort=sort,
            to=to,
            var_from=var_from,
            striptags=striptags,
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "RevivesFullResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _f17a4064779e8de5200238816c233c02_serialize(
        self,
        limit,
        sort,
        to,
        var_from,
        striptags,
        timestamp,
        comment,
        key,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if sort is not None:
            
            _query_params.append(('sort', sort))
            
        if to is not None:
            
            _query_params.append(('to', to))
            
        if var_from is not None:
            
            _query_params.append(('from', var_from))
            
        if striptags is not None:
            
            _query_params.append(('striptags', striptags))
            
        if timestamp is not None:
            
            _query_params.append(('timestamp', timestamp))
            
        if comment is not None:
            
            _query_params.append(('comment', comment))
            
        if key is not None:
            
            _query_params.append(('key', key))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'api_key'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/faction/revivesFull',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def f750d219e54329ae300c4db384dd5dcd(
        self,
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> FactionRacketsResponse:
        """Get a list of current rackets

        Requires public access key. <br>

        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._f750d219e54329ae300c4db384dd5dcd_serialize(
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FactionRacketsResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def f750d219e54329ae300c4db384dd5dcd_with_http_info(
        self,
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[FactionRacketsResponse]:
        """Get a list of current rackets

        Requires public access key. <br>

        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._f750d219e54329ae300c4db384dd5dcd_serialize(
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FactionRacketsResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def f750d219e54329ae300c4db384dd5dcd_without_preload_content(
        self,
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get a list of current rackets

        Requires public access key. <br>

        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._f750d219e54329ae300c4db384dd5dcd_serialize(
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FactionRacketsResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _f750d219e54329ae300c4db384dd5dcd_serialize(
        self,
        timestamp,
        comment,
        key,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if timestamp is not None:
            
            _query_params.append(('timestamp', timestamp))
            
        if comment is not None:
            
            _query_params.append(('comment', comment))
            
        if key is not None:
            
            _query_params.append(('key', key))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'api_key'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/faction/rackets',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def fa6b3fbb14e5f3a71279b058bd751754(
        self,
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> FactionTerritoriesResponse:
        """Get a list of your faction's territories

        Requires public access key. <br>

        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._fa6b3fbb14e5f3a71279b058bd751754_serialize(
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FactionTerritoriesResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def fa6b3fbb14e5f3a71279b058bd751754_with_http_info(
        self,
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[FactionTerritoriesResponse]:
        """Get a list of your faction's territories

        Requires public access key. <br>

        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._fa6b3fbb14e5f3a71279b058bd751754_serialize(
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FactionTerritoriesResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def fa6b3fbb14e5f3a71279b058bd751754_without_preload_content(
        self,
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get a list of your faction's territories

        Requires public access key. <br>

        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._fa6b3fbb14e5f3a71279b058bd751754_serialize(
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FactionTerritoriesResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _fa6b3fbb14e5f3a71279b058bd751754_serialize(
        self,
        timestamp,
        comment,
        key,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if timestamp is not None:
            
            _query_params.append(('timestamp', timestamp))
            
        if comment is not None:
            
            _query_params.append(('comment', comment))
            
        if key is not None:
            
            _query_params.append(('key', key))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'api_key'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/faction/territory',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def fb363bf0e1d54296bd4d5dd554ad9825(
        self,
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> FactionBasicResponse:
        """Get your faction's basic details

        Requires public access key. <br> The 'is_enlisted' value will be populated if you have API faction permissions (with custom, limited or full access keys), otherwise it will be set as null.

        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._fb363bf0e1d54296bd4d5dd554ad9825_serialize(
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FactionBasicResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def fb363bf0e1d54296bd4d5dd554ad9825_with_http_info(
        self,
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[FactionBasicResponse]:
        """Get your faction's basic details

        Requires public access key. <br> The 'is_enlisted' value will be populated if you have API faction permissions (with custom, limited or full access keys), otherwise it will be set as null.

        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._fb363bf0e1d54296bd4d5dd554ad9825_serialize(
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FactionBasicResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def fb363bf0e1d54296bd4d5dd554ad9825_without_preload_content(
        self,
        timestamp: Annotated[Optional[StrictStr], Field(description="Timestamp to bypass cache")] = None,
        comment: Annotated[Optional[StrictStr], Field(description="Comment for your tool/service/bot/website to be visible in the logs.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get your faction's basic details

        Requires public access key. <br> The 'is_enlisted' value will be populated if you have API faction permissions (with custom, limited or full access keys), otherwise it will be set as null.

        :param timestamp: Timestamp to bypass cache
        :type timestamp: str
        :param comment: Comment for your tool/service/bot/website to be visible in the logs.
        :type comment: str
        :param key: API key (Public).<br>It's not required to use this parameter when passing the API key via the Authorization header.
        :type key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._fb363bf0e1d54296bd4d5dd554ad9825_serialize(
            timestamp=timestamp,
            comment=comment,
            key=key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FactionBasicResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _fb363bf0e1d54296bd4d5dd554ad9825_serialize(
        self,
        timestamp,
        comment,
        key,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if timestamp is not None:
            
            _query_params.append(('timestamp', timestamp))
            
        if comment is not None:
            
            _query_params.append(('comment', comment))
            
        if key is not None:
            
            _query_params.append(('key', key))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'api_key'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/faction/basic',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


