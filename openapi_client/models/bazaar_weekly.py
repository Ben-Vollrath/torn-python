# coding: utf-8

"""
    Torn API

      * The development of Torn's API v2 is still ongoing.  * If selections remain unaltered, they will default to the API v1 version.  * Unlike API v1, API v2 accepts both selections and IDs as path and query parameters.  * If any discrepancies or errors are found, please submit a [bug report](https://www.torn.com/forums.php#/p=forums&f=19&b=0&a=0) on the Torn Forums.  * In case you're using bots to check for changes on openapi.json file, make sure to specificy a custom user-agent header - CloudFlare sometimes prevents requests from default user-agents.

    The version of the OpenAPI document: 3.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict
from typing import Any, ClassVar, Dict, List
from openapi_client.models.bazaar_advanced_item_sales import BazaarAdvancedItemSales
from openapi_client.models.bazaar_bargain_sales import BazaarBargainSales
from openapi_client.models.bazaar_bulk_sales import BazaarBulkSales
from openapi_client.models.bazaar_dollar_sales import BazaarDollarSales
from openapi_client.models.bazaar_recent_favorites import BazaarRecentFavorites
from openapi_client.models.bazaar_total_favorites import BazaarTotalFavorites
from openapi_client.models.bazaar_weekly_customers import BazaarWeeklyCustomers
from openapi_client.models.bazaar_weekly_income import BazaarWeeklyIncome
from typing import Optional, Set
from typing_extensions import Self

class BazaarWeekly(BaseModel):
    """
    BazaarWeekly
    """ # noqa: E501
    busiest: List[BazaarWeeklyCustomers]
    most_popular: List[BazaarTotalFavorites]
    trending: List[BazaarRecentFavorites]
    top_grossing: List[BazaarWeeklyIncome]
    bulk: List[BazaarBulkSales]
    advanced_item: List[BazaarAdvancedItemSales]
    bargain: List[BazaarBargainSales]
    dollar_sale: List[BazaarDollarSales]
    __properties: ClassVar[List[str]] = ["busiest", "most_popular", "trending", "top_grossing", "bulk", "advanced_item", "bargain", "dollar_sale"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BazaarWeekly from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in busiest (list)
        _items = []
        if self.busiest:
            for _item_busiest in self.busiest:
                if _item_busiest:
                    _items.append(_item_busiest.to_dict())
            _dict['busiest'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in most_popular (list)
        _items = []
        if self.most_popular:
            for _item_most_popular in self.most_popular:
                if _item_most_popular:
                    _items.append(_item_most_popular.to_dict())
            _dict['most_popular'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in trending (list)
        _items = []
        if self.trending:
            for _item_trending in self.trending:
                if _item_trending:
                    _items.append(_item_trending.to_dict())
            _dict['trending'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in top_grossing (list)
        _items = []
        if self.top_grossing:
            for _item_top_grossing in self.top_grossing:
                if _item_top_grossing:
                    _items.append(_item_top_grossing.to_dict())
            _dict['top_grossing'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in bulk (list)
        _items = []
        if self.bulk:
            for _item_bulk in self.bulk:
                if _item_bulk:
                    _items.append(_item_bulk.to_dict())
            _dict['bulk'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in advanced_item (list)
        _items = []
        if self.advanced_item:
            for _item_advanced_item in self.advanced_item:
                if _item_advanced_item:
                    _items.append(_item_advanced_item.to_dict())
            _dict['advanced_item'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in bargain (list)
        _items = []
        if self.bargain:
            for _item_bargain in self.bargain:
                if _item_bargain:
                    _items.append(_item_bargain.to_dict())
            _dict['bargain'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in dollar_sale (list)
        _items = []
        if self.dollar_sale:
            for _item_dollar_sale in self.dollar_sale:
                if _item_dollar_sale:
                    _items.append(_item_dollar_sale.to_dict())
            _dict['dollar_sale'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BazaarWeekly from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "busiest": [BazaarWeeklyCustomers.from_dict(_item) for _item in obj["busiest"]] if obj.get("busiest") is not None else None,
            "most_popular": [BazaarTotalFavorites.from_dict(_item) for _item in obj["most_popular"]] if obj.get("most_popular") is not None else None,
            "trending": [BazaarRecentFavorites.from_dict(_item) for _item in obj["trending"]] if obj.get("trending") is not None else None,
            "top_grossing": [BazaarWeeklyIncome.from_dict(_item) for _item in obj["top_grossing"]] if obj.get("top_grossing") is not None else None,
            "bulk": [BazaarBulkSales.from_dict(_item) for _item in obj["bulk"]] if obj.get("bulk") is not None else None,
            "advanced_item": [BazaarAdvancedItemSales.from_dict(_item) for _item in obj["advanced_item"]] if obj.get("advanced_item") is not None else None,
            "bargain": [BazaarBargainSales.from_dict(_item) for _item in obj["bargain"]] if obj.get("bargain") is not None else None,
            "dollar_sale": [BazaarDollarSales.from_dict(_item) for _item in obj["dollar_sale"]] if obj.get("dollar_sale") is not None else None
        })
        return _obj


