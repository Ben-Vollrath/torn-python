# coding: utf-8

"""
    Torn API

      * The development of Torn's API v2 is still ongoing.  * If selections remain unaltered, they will default to the API v1 version.  * Unlike API v1, API v2 accepts both selections and IDs as path and query parameters.  * If any discrepancies or errors are found, please submit a [bug report](https://www.torn.com/forums.php#/p=forums&f=19&b=0&a=0) on the Torn Forums.  * In case you're using bots to check for changes on openapi.json file, make sure to specificy a custom user-agent header - CloudFlare sometimes prevents requests from default user-agents.

    The version of the OpenAPI document: 3.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.faction_crime_slot_item_requirement import FactionCrimeSlotItemRequirement
from openapi_client.models.faction_crime_user import FactionCrimeUser
from openapi_client.models.torn_organized_crime_position_id import TornOrganizedCrimePositionId
from typing import Optional, Set
from typing_extensions import Self

class FactionCrimeSlot(BaseModel):
    """
    FactionCrimeSlot
    """ # noqa: E501
    position: StrictStr
    position_id: TornOrganizedCrimePositionId
    position_number: StrictInt
    item_requirement: Optional[FactionCrimeSlotItemRequirement]
    user: Optional[FactionCrimeUser]
    checkpoint_pass_rate: StrictInt = Field(description="Returns CPR for the player who joined the slot. If the slot is empty (availalbe), it shows your CPR for that slot. This value is 0 for expired crimes.")
    __properties: ClassVar[List[str]] = ["position", "position_id", "position_number", "item_requirement", "user", "checkpoint_pass_rate"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of FactionCrimeSlot from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of item_requirement
        if self.item_requirement:
            _dict['item_requirement'] = self.item_requirement.to_dict()
        # override the default output from pydantic by calling `to_dict()` of user
        if self.user:
            _dict['user'] = self.user.to_dict()
        # set to None if item_requirement (nullable) is None
        # and model_fields_set contains the field
        if self.item_requirement is None and "item_requirement" in self.model_fields_set:
            _dict['item_requirement'] = None

        # set to None if user (nullable) is None
        # and model_fields_set contains the field
        if self.user is None and "user" in self.model_fields_set:
            _dict['user'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of FactionCrimeSlot from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "position": obj.get("position"),
            "position_id": obj.get("position_id"),
            "position_number": obj.get("position_number"),
            "item_requirement": FactionCrimeSlotItemRequirement.from_dict(obj["item_requirement"]) if obj.get("item_requirement") is not None else None,
            "user": FactionCrimeUser.from_dict(obj["user"]) if obj.get("user") is not None else None,
            "checkpoint_pass_rate": obj.get("checkpoint_pass_rate")
        })
        return _obj


