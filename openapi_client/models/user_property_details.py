# coding: utf-8

"""
    Torn API

      * The development of Torn's API v2 is still ongoing.  * If selections remain unaltered, they will default to the API v1 version.  * Unlike API v1, API v2 accepts both selections and IDs as path and query parameters.  * If any discrepancies or errors are found, please submit a [bug report](https://www.torn.com/forums.php#/p=forums&f=19&b=0&a=0) on the Torn Forums.  * In case you're using bots to check for changes on openapi.json file, make sure to specificy a custom user-agent header - CloudFlare sometimes prevents requests from default user-agents.

    The version of the OpenAPI document: 3.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt
from typing import Any, ClassVar, Dict, List
from openapi_client.models.basic_property import BasicProperty
from openapi_client.models.basic_user import BasicUser
from openapi_client.models.property_modification_enum import PropertyModificationEnum
from openapi_client.models.user_property_basic_details_staff_inner import UserPropertyBasicDetailsStaffInner
from openapi_client.models.user_property_basic_details_upkeep import UserPropertyBasicDetailsUpkeep
from typing import Optional, Set
from typing_extensions import Self

class UserPropertyDetails(BaseModel):
    """
    UserPropertyDetails
    """ # noqa: E501
    id: StrictInt
    owner: BasicUser
    var_property: BasicProperty = Field(alias="property")
    happy: StrictInt
    upkeep: UserPropertyBasicDetailsUpkeep
    market_price: StrictInt
    modifications: List[PropertyModificationEnum]
    staff: List[UserPropertyBasicDetailsStaffInner]
    used_by: List[BasicUser]
    __properties: ClassVar[List[str]] = ["id", "owner", "property", "happy", "upkeep", "market_price", "modifications", "staff", "used_by"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UserPropertyDetails from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of owner
        if self.owner:
            _dict['owner'] = self.owner.to_dict()
        # override the default output from pydantic by calling `to_dict()` of var_property
        if self.var_property:
            _dict['property'] = self.var_property.to_dict()
        # override the default output from pydantic by calling `to_dict()` of upkeep
        if self.upkeep:
            _dict['upkeep'] = self.upkeep.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in staff (list)
        _items = []
        if self.staff:
            for _item_staff in self.staff:
                if _item_staff:
                    _items.append(_item_staff.to_dict())
            _dict['staff'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in used_by (list)
        _items = []
        if self.used_by:
            for _item_used_by in self.used_by:
                if _item_used_by:
                    _items.append(_item_used_by.to_dict())
            _dict['used_by'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UserPropertyDetails from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "owner": BasicUser.from_dict(obj["owner"]) if obj.get("owner") is not None else None,
            "property": BasicProperty.from_dict(obj["property"]) if obj.get("property") is not None else None,
            "happy": obj.get("happy"),
            "upkeep": UserPropertyBasicDetailsUpkeep.from_dict(obj["upkeep"]) if obj.get("upkeep") is not None else None,
            "market_price": obj.get("market_price"),
            "modifications": obj.get("modifications"),
            "staff": [UserPropertyBasicDetailsStaffInner.from_dict(_item) for _item in obj["staff"]] if obj.get("staff") is not None else None,
            "used_by": [BasicUser.from_dict(_item) for _item in obj["used_by"]] if obj.get("used_by") is not None else None
        })
        return _obj


