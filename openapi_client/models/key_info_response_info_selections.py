# coding: utf-8

"""
    Torn API

      * The development of Torn's API v2 is still ongoing.  * If selections remain unaltered, they will default to the API v1 version.  * Unlike API v1, API v2 accepts both selections and IDs as path and query parameters.  * If any discrepancies or errors are found, please submit a [bug report](https://www.torn.com/forums.php#/p=forums&f=19&b=0&a=0) on the Torn Forums.  * In case you're using bots to check for changes on openapi.json file, make sure to specificy a custom user-agent header - CloudFlare sometimes prevents requests from default user-agents.

    The version of the OpenAPI document: 3.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List
from openapi_client.models.faction_selection_name import FactionSelectionName
from openapi_client.models.forum_selection_name import ForumSelectionName
from openapi_client.models.key_selection_name import KeySelectionName
from openapi_client.models.market_selection_name import MarketSelectionName
from openapi_client.models.racing_selection_name import RacingSelectionName
from openapi_client.models.torn_selection_name import TornSelectionName
from openapi_client.models.user_selection_name import UserSelectionName
from typing import Optional, Set
from typing_extensions import Self

class KeyInfoResponseInfoSelections(BaseModel):
    """
    KeyInfoResponseInfoSelections
    """ # noqa: E501
    company: List[StrictStr]
    faction: List[FactionSelectionName]
    market: List[MarketSelectionName]
    var_property: List[StrictStr] = Field(alias="property")
    torn: List[TornSelectionName]
    user: List[UserSelectionName]
    racing: List[RacingSelectionName]
    forum: List[ForumSelectionName]
    key: List[KeySelectionName]
    __properties: ClassVar[List[str]] = ["company", "faction", "market", "property", "torn", "user", "racing", "forum", "key"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of KeyInfoResponseInfoSelections from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in faction (list)
        _items = []
        if self.faction:
            for _item_faction in self.faction:
                if _item_faction:
                    _items.append(_item_faction.to_dict())
            _dict['faction'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in market (list)
        _items = []
        if self.market:
            for _item_market in self.market:
                if _item_market:
                    _items.append(_item_market.to_dict())
            _dict['market'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in torn (list)
        _items = []
        if self.torn:
            for _item_torn in self.torn:
                if _item_torn:
                    _items.append(_item_torn.to_dict())
            _dict['torn'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in user (list)
        _items = []
        if self.user:
            for _item_user in self.user:
                if _item_user:
                    _items.append(_item_user.to_dict())
            _dict['user'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in racing (list)
        _items = []
        if self.racing:
            for _item_racing in self.racing:
                if _item_racing:
                    _items.append(_item_racing.to_dict())
            _dict['racing'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in forum (list)
        _items = []
        if self.forum:
            for _item_forum in self.forum:
                if _item_forum:
                    _items.append(_item_forum.to_dict())
            _dict['forum'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in key (list)
        _items = []
        if self.key:
            for _item_key in self.key:
                if _item_key:
                    _items.append(_item_key.to_dict())
            _dict['key'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of KeyInfoResponseInfoSelections from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "company": obj.get("company"),
            "faction": [FactionSelectionName.from_dict(_item) for _item in obj["faction"]] if obj.get("faction") is not None else None,
            "market": [MarketSelectionName.from_dict(_item) for _item in obj["market"]] if obj.get("market") is not None else None,
            "property": obj.get("property"),
            "torn": [TornSelectionName.from_dict(_item) for _item in obj["torn"]] if obj.get("torn") is not None else None,
            "user": [UserSelectionName.from_dict(_item) for _item in obj["user"]] if obj.get("user") is not None else None,
            "racing": [RacingSelectionName.from_dict(_item) for _item in obj["racing"]] if obj.get("racing") is not None else None,
            "forum": [ForumSelectionName.from_dict(_item) for _item in obj["forum"]] if obj.get("forum") is not None else None,
            "key": [KeySelectionName.from_dict(_item) for _item in obj["key"]] if obj.get("key") is not None else None
        })
        return _obj


